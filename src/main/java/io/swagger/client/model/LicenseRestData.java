/*
 * Kiuwan REST API
 * Kiuwan REST API specification
 *
 * OpenAPI spec version: 2.8.2004.3-SNAPSHOT
 * Contact: support@kiuwan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ComponentSimpleRestData;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * LicenseRestData
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-14T08:41:48.057Z")
public class LicenseRestData {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("license")
  private String license = null;

  @SerializedName("component")
  private String component = null;

  @SerializedName("spdxCode")
  private String spdxCode = null;

  /**
   * License type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    COPYLEFT("Copyleft"),
    
    COPYRIGHTED("Copyrighted"),
    
    NONOPENSOURCE("NonOpenSource"),
    
    PERMISSIVE("Permissive"),
    
    PROPIETARY("Propietary"),
    
    PUBLICDOMAIN("PublicDomain"),
    
    UNKNOWN("Unknown"),
    
    WEAKCOPYLEFT("WeakCopyleft");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("url")
  private String url = null;

  /**
   * License risk
   */
  @JsonAdapter(RiskEnum.Adapter.class)
  public enum RiskEnum {
    HIGH("High"),
    
    MEDIUM("Medium"),
    
    LOW("Low"),
    
    NONE("None"),
    
    UNKNOWN("Unknown");

    private String value;

    RiskEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RiskEnum fromValue(String text) {
      for (RiskEnum b : RiskEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RiskEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RiskEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RiskEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RiskEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("risk")
  private RiskEnum risk = null;

  @SerializedName("permissions")
  private String permissions = null;

  @SerializedName("limitations")
  private String limitations = null;

  @SerializedName("conditions")
  private String conditions = null;

  @SerializedName("components")
  private List<ComponentSimpleRestData> components = null;

  public LicenseRestData id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * License identifier
   * @return id
  **/
  @ApiModelProperty(example = "23", value = "License identifier")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public LicenseRestData license(String license) {
    this.license = license;
    return this;
  }

   /**
   * License name
   * @return license
  **/
  @ApiModelProperty(example = "Apache License 2.0", value = "License name")
  public String getLicense() {
    return license;
  }

  public void setLicense(String license) {
    this.license = license;
  }

  public LicenseRestData component(String component) {
    this.component = component;
    return this;
  }

   /**
   * Number of components with this license
   * @return component
  **/
  @ApiModelProperty(example = "8", value = "Number of components with this license")
  public String getComponent() {
    return component;
  }

  public void setComponent(String component) {
    this.component = component;
  }

  public LicenseRestData spdxCode(String spdxCode) {
    this.spdxCode = spdxCode;
    return this;
  }

   /**
   * SPDX code (Software Package Data Exchange)
   * @return spdxCode
  **/
  @ApiModelProperty(example = "Apache-2.0", value = "SPDX code (Software Package Data Exchange)")
  public String getSpdxCode() {
    return spdxCode;
  }

  public void setSpdxCode(String spdxCode) {
    this.spdxCode = spdxCode;
  }

  public LicenseRestData type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * License type
   * @return type
  **/
  @ApiModelProperty(example = "Permissive", value = "License type")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public LicenseRestData url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Link to license description
   * @return url
  **/
  @ApiModelProperty(example = "https://spdx.org/licenses/Apache-2.0.html", value = "Link to license description")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public LicenseRestData risk(RiskEnum risk) {
    this.risk = risk;
    return this;
  }

   /**
   * License risk
   * @return risk
  **/
  @ApiModelProperty(example = "none", value = "License risk")
  public RiskEnum getRisk() {
    return risk;
  }

  public void setRisk(RiskEnum risk) {
    this.risk = risk;
  }

  public LicenseRestData permissions(String permissions) {
    this.permissions = permissions;
    return this;
  }

   /**
   * License permissions
   * @return permissions
  **/
  @ApiModelProperty(example = "[\"COMMERCIAL\",\"MODIFY\",\"DISTRIBUTE\",\"SUBLICENSE\",\"PRIVATE\",\"USE_PATENT_CLAIMS\",\"PLACE_WARRANTY\"]", value = "License permissions")
  public String getPermissions() {
    return permissions;
  }

  public void setPermissions(String permissions) {
    this.permissions = permissions;
  }

  public LicenseRestData limitations(String limitations) {
    this.limitations = limitations;
    return this;
  }

   /**
   * License limitations
   * @return limitations
  **/
  @ApiModelProperty(example = "[\"HOLD_LIABLE\",\"USE_TRADEMARK\"]", value = "License limitations")
  public String getLimitations() {
    return limitations;
  }

  public void setLimitations(String limitations) {
    this.limitations = limitations;
  }

  public LicenseRestData conditions(String conditions) {
    this.conditions = conditions;
    return this;
  }

   /**
   * License conditions
   * @return conditions
  **/
  @ApiModelProperty(example = "[\"INCL_COPYRIGHT\",\"INCL_LICENSE\",\"STATE_CHANGES\",\"INCLUDE_NOTICE\"]", value = "License conditions")
  public String getConditions() {
    return conditions;
  }

  public void setConditions(String conditions) {
    this.conditions = conditions;
  }

  public LicenseRestData components(List<ComponentSimpleRestData> components) {
    this.components = components;
    return this;
  }

  public LicenseRestData addComponentsItem(ComponentSimpleRestData componentsItem) {
    if (this.components == null) {
      this.components = new ArrayList<ComponentSimpleRestData>();
    }
    this.components.add(componentsItem);
    return this;
  }

   /**
   * List of components with this license
   * @return components
  **/
  @ApiModelProperty(value = "List of components with this license")
  public List<ComponentSimpleRestData> getComponents() {
    return components;
  }

  public void setComponents(List<ComponentSimpleRestData> components) {
    this.components = components;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseRestData licenseRestData = (LicenseRestData) o;
    return Objects.equals(this.id, licenseRestData.id) &&
        Objects.equals(this.license, licenseRestData.license) &&
        Objects.equals(this.component, licenseRestData.component) &&
        Objects.equals(this.spdxCode, licenseRestData.spdxCode) &&
        Objects.equals(this.type, licenseRestData.type) &&
        Objects.equals(this.url, licenseRestData.url) &&
        Objects.equals(this.risk, licenseRestData.risk) &&
        Objects.equals(this.permissions, licenseRestData.permissions) &&
        Objects.equals(this.limitations, licenseRestData.limitations) &&
        Objects.equals(this.conditions, licenseRestData.conditions) &&
        Objects.equals(this.components, licenseRestData.components);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, license, component, spdxCode, type, url, risk, permissions, limitations, conditions, components);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseRestData {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    spdxCode: ").append(toIndentedString(spdxCode)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    risk: ").append(toIndentedString(risk)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    limitations: ").append(toIndentedString(limitations)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

