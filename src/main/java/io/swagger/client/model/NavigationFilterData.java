/*
 * Kiuwan REST API
 * Kiuwan REST API specification
 *
 * OpenAPI spec version: 2.8.2004.3-SNAPSHOT
 * Contact: support@kiuwan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * NavigationFilterData
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-14T08:41:48.057Z")
public class NavigationFilterData {
  @SerializedName("relations")
  private String relations = null;

  /**
   * Direction (in, out, any; default: out)
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    IN("in"),
    
    OUT("out"),
    
    ANY("any");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String text) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DirectionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("direction")
  private DirectionEnum direction = null;

  @SerializedName("depth")
  private Integer depth = null;

  public NavigationFilterData relations(String relations) {
    this.relations = relations;
    return this;
  }

   /**
   * Comma separated list of component relations (calls, configuration, delete, includes, inherits...)
   * @return relations
  **/
  @ApiModelProperty(example = "contains,uses,update", value = "Comma separated list of component relations (calls, configuration, delete, includes, inherits...)")
  public String getRelations() {
    return relations;
  }

  public void setRelations(String relations) {
    this.relations = relations;
  }

  public NavigationFilterData direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Direction (in, out, any; default: out)
   * @return direction
  **/
  @ApiModelProperty(example = "out", value = "Direction (in, out, any; default: out)")
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }

  public NavigationFilterData depth(Integer depth) {
    this.depth = depth;
    return this;
  }

   /**
   * Depth
   * @return depth
  **/
  @ApiModelProperty(example = "2", value = "Depth")
  public Integer getDepth() {
    return depth;
  }

  public void setDepth(Integer depth) {
    this.depth = depth;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NavigationFilterData navigationFilterData = (NavigationFilterData) o;
    return Objects.equals(this.relations, navigationFilterData.relations) &&
        Objects.equals(this.direction, navigationFilterData.direction) &&
        Objects.equals(this.depth, navigationFilterData.depth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(relations, direction, depth);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NavigationFilterData {\n");
    
    sb.append("    relations: ").append(toIndentedString(relations)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

