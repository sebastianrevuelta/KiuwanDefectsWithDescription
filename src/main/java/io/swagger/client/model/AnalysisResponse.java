/*
 * Kiuwan REST API
 * Kiuwan REST API specification
 *
 * OpenAPI spec version: 2.8.2004.3-SNAPSHOT
 * Contact: support@kiuwan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.UnparsedFileData;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * AnalysisResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-14T08:41:48.057Z")
public class AnalysisResponse {
  @SerializedName("code")
  private String code = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("creationDate")
  private String creationDate = null;

  @SerializedName("qualityModel")
  private String qualityModel = null;

  @SerializedName("modelId")
  private String modelId = null;

  @SerializedName("encoding")
  private String encoding = null;

  @SerializedName("invoker")
  private String invoker = null;

  /**
   * Analysis status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    INQUEUE("INQUEUE"),
    
    FAIL("FAIL"),
    
    SUCCESS("SUCCESS"),
    
    RUNNING("RUNNING");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("errorCode")
  private String errorCode = null;

  @SerializedName("unparsedFiles")
  private List<UnparsedFileData> unparsedFiles = null;

  /**
   * Analysis scope
   */
  @JsonAdapter(AnalysisScopeEnum.Adapter.class)
  public enum AnalysisScopeEnum {
    BASELINE("Baseline"),
    
    COMPLETE_DELIVERY("Complete delivery"),
    
    PARTIAL_DELIVERY("Partial delivery");

    private String value;

    AnalysisScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnalysisScopeEnum fromValue(String text) {
      for (AnalysisScopeEnum b : AnalysisScopeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AnalysisScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnalysisScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnalysisScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AnalysisScopeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("analysisScope")
  private AnalysisScopeEnum analysisScope = null;

  @SerializedName("changeRequest")
  private String changeRequest = null;

  /**
   * Change request status
   */
  @JsonAdapter(ChangeRequestStatusEnum.Adapter.class)
  public enum ChangeRequestStatusEnum {
    RESOLVED("Resolved"),
    
    IN_PROGRESS("In progress");

    private String value;

    ChangeRequestStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChangeRequestStatusEnum fromValue(String text) {
      for (ChangeRequestStatusEnum b : ChangeRequestStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChangeRequestStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChangeRequestStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChangeRequestStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChangeRequestStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("changeRequestStatus")
  private ChangeRequestStatusEnum changeRequestStatus = null;

  @SerializedName("branchName")
  private String branchName = null;

  @SerializedName("auditResult")
  private String auditResult = null;

  /**
   * Analysis business value
   */
  @JsonAdapter(AnalysisBusinessValueEnum.Adapter.class)
  public enum AnalysisBusinessValueEnum {
    VERY_LOW("VERY LOW"),
    
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH"),
    
    CRITICAL("CRITICAL");

    private String value;

    AnalysisBusinessValueEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnalysisBusinessValueEnum fromValue(String text) {
      for (AnalysisBusinessValueEnum b : AnalysisBusinessValueEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AnalysisBusinessValueEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnalysisBusinessValueEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnalysisBusinessValueEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AnalysisBusinessValueEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("analysisBusinessValue")
  private AnalysisBusinessValueEnum analysisBusinessValue = null;

  @SerializedName("analysisProvider")
  private String analysisProvider = null;

  @SerializedName("analysisPortfolios")
  private Map<String, Object> analysisPortfolios = null;

  @SerializedName("metrics")
  private Map<String, Double> metrics = null;

  public AnalysisResponse code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Analysis code
   * @return code
  **/
  @ApiModelProperty(example = "A-7e3-16dc9e29131", value = "Analysis code")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public AnalysisResponse label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Analysis label
   * @return label
  **/
  @ApiModelProperty(example = "14.10.2019_1", value = "Analysis label")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public AnalysisResponse creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Analysis creation date
   * @return creationDate
  **/
  @ApiModelProperty(example = "2019-10-14T15:15:15Z", value = "Analysis creation date")
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }

  public AnalysisResponse qualityModel(String qualityModel) {
    this.qualityModel = qualityModel;
    return this;
  }

   /**
   * Quality model
   * @return qualityModel
  **/
  @ApiModelProperty(example = "CQM", value = "Quality model")
  public String getQualityModel() {
    return qualityModel;
  }

  public void setQualityModel(String qualityModel) {
    this.qualityModel = qualityModel;
  }

  public AnalysisResponse modelId(String modelId) {
    this.modelId = modelId;
    return this;
  }

   /**
   * Model indentifier
   * @return modelId
  **/
  @ApiModelProperty(value = "Model indentifier")
  public String getModelId() {
    return modelId;
  }

  public void setModelId(String modelId) {
    this.modelId = modelId;
  }

  public AnalysisResponse encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

   /**
   * Analysis enconding
   * @return encoding
  **/
  @ApiModelProperty(example = "UTF-8", value = "Analysis enconding")
  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }

  public AnalysisResponse invoker(String invoker) {
    this.invoker = invoker;
    return this;
  }

   /**
   * Analysis user invoker
   * @return invoker
  **/
  @ApiModelProperty(example = "github software", value = "Analysis user invoker")
  public String getInvoker() {
    return invoker;
  }

  public void setInvoker(String invoker) {
    this.invoker = invoker;
  }

  public AnalysisResponse status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Analysis status
   * @return status
  **/
  @ApiModelProperty(example = "RUNNING", value = "Analysis status")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public AnalysisResponse errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Analysis error code
   * @return errorCode
  **/
  @ApiModelProperty(value = "Analysis error code")
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }

  public AnalysisResponse unparsedFiles(List<UnparsedFileData> unparsedFiles) {
    this.unparsedFiles = unparsedFiles;
    return this;
  }

  public AnalysisResponse addUnparsedFilesItem(UnparsedFileData unparsedFilesItem) {
    if (this.unparsedFiles == null) {
      this.unparsedFiles = new ArrayList<UnparsedFileData>();
    }
    this.unparsedFiles.add(unparsedFilesItem);
    return this;
  }

   /**
   * Unparsed files list
   * @return unparsedFiles
  **/
  @ApiModelProperty(value = "Unparsed files list")
  public List<UnparsedFileData> getUnparsedFiles() {
    return unparsedFiles;
  }

  public void setUnparsedFiles(List<UnparsedFileData> unparsedFiles) {
    this.unparsedFiles = unparsedFiles;
  }

  public AnalysisResponse analysisScope(AnalysisScopeEnum analysisScope) {
    this.analysisScope = analysisScope;
    return this;
  }

   /**
   * Analysis scope
   * @return analysisScope
  **/
  @ApiModelProperty(example = "Baseline", value = "Analysis scope")
  public AnalysisScopeEnum getAnalysisScope() {
    return analysisScope;
  }

  public void setAnalysisScope(AnalysisScopeEnum analysisScope) {
    this.analysisScope = analysisScope;
  }

  public AnalysisResponse changeRequest(String changeRequest) {
    this.changeRequest = changeRequest;
    return this;
  }

   /**
   * Delivery change request
   * @return changeRequest
  **/
  @ApiModelProperty(example = "CR_14-10-2019_1", value = "Delivery change request")
  public String getChangeRequest() {
    return changeRequest;
  }

  public void setChangeRequest(String changeRequest) {
    this.changeRequest = changeRequest;
  }

  public AnalysisResponse changeRequestStatus(ChangeRequestStatusEnum changeRequestStatus) {
    this.changeRequestStatus = changeRequestStatus;
    return this;
  }

   /**
   * Change request status
   * @return changeRequestStatus
  **/
  @ApiModelProperty(example = "Resolved", value = "Change request status")
  public ChangeRequestStatusEnum getChangeRequestStatus() {
    return changeRequestStatus;
  }

  public void setChangeRequestStatus(ChangeRequestStatusEnum changeRequestStatus) {
    this.changeRequestStatus = changeRequestStatus;
  }

  public AnalysisResponse branchName(String branchName) {
    this.branchName = branchName;
    return this;
  }

   /**
   * Delivery branch name
   * @return branchName
  **/
  @ApiModelProperty(example = "master", value = "Delivery branch name")
  public String getBranchName() {
    return branchName;
  }

  public void setBranchName(String branchName) {
    this.branchName = branchName;
  }

  public AnalysisResponse auditResult(String auditResult) {
    this.auditResult = auditResult;
    return this;
  }

   /**
   * Delivery audit result
   * @return auditResult
  **/
  @ApiModelProperty(example = "FAIL", value = "Delivery audit result")
  public String getAuditResult() {
    return auditResult;
  }

  public void setAuditResult(String auditResult) {
    this.auditResult = auditResult;
  }

  public AnalysisResponse analysisBusinessValue(AnalysisBusinessValueEnum analysisBusinessValue) {
    this.analysisBusinessValue = analysisBusinessValue;
    return this;
  }

   /**
   * Analysis business value
   * @return analysisBusinessValue
  **/
  @ApiModelProperty(example = "CRITICAL", value = "Analysis business value")
  public AnalysisBusinessValueEnum getAnalysisBusinessValue() {
    return analysisBusinessValue;
  }

  public void setAnalysisBusinessValue(AnalysisBusinessValueEnum analysisBusinessValue) {
    this.analysisBusinessValue = analysisBusinessValue;
  }

  public AnalysisResponse analysisProvider(String analysisProvider) {
    this.analysisProvider = analysisProvider;
    return this;
  }

   /**
   * Analysis provider
   * @return analysisProvider
  **/
  @ApiModelProperty(example = "Lab", value = "Analysis provider")
  public String getAnalysisProvider() {
    return analysisProvider;
  }

  public void setAnalysisProvider(String analysisProvider) {
    this.analysisProvider = analysisProvider;
  }

  public AnalysisResponse analysisPortfolios(Map<String, Object> analysisPortfolios) {
    this.analysisPortfolios = analysisPortfolios;
    return this;
  }

  public AnalysisResponse putAnalysisPortfoliosItem(String key, Object analysisPortfoliosItem) {
    if (this.analysisPortfolios == null) {
      this.analysisPortfolios = new HashMap<String, Object>();
    }
    this.analysisPortfolios.put(key, analysisPortfoliosItem);
    return this;
  }

   /**
   * Map of analysis portfolios
   * @return analysisPortfolios
  **/
  @ApiModelProperty(example = "\"{ 'country': 'spain' }\"", value = "Map of analysis portfolios")
  public Map<String, Object> getAnalysisPortfolios() {
    return analysisPortfolios;
  }

  public void setAnalysisPortfolios(Map<String, Object> analysisPortfolios) {
    this.analysisPortfolios = analysisPortfolios;
  }

  public AnalysisResponse metrics(Map<String, Double> metrics) {
    this.metrics = metrics;
    return this;
  }

  public AnalysisResponse putMetricsItem(String key, Double metricsItem) {
    if (this.metrics == null) {
      this.metrics = new HashMap<String, Double>();
    }
    this.metrics.put(key, metricsItem);
    return this;
  }

   /**
   * Map of analysis metrics
   * @return metrics
  **/
  @ApiModelProperty(example = "\"{'com.optimyth.CQM.defectsByPriority.Priority 1': 163,'com.optimyth.CQM.defectsByPriority.Priority 2': 201,'com.optimyth.CQM.defectsByPriority.Priority 3': 159,'com.optimyth.CQM.defectsByPriority.Priority 4': 17,'com.optimyth.CQM.defectsByPriority.Priority 5': 41}\"", value = "Map of analysis metrics")
  public Map<String, Double> getMetrics() {
    return metrics;
  }

  public void setMetrics(Map<String, Double> metrics) {
    this.metrics = metrics;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalysisResponse analysisResponse = (AnalysisResponse) o;
    return Objects.equals(this.code, analysisResponse.code) &&
        Objects.equals(this.label, analysisResponse.label) &&
        Objects.equals(this.creationDate, analysisResponse.creationDate) &&
        Objects.equals(this.qualityModel, analysisResponse.qualityModel) &&
        Objects.equals(this.modelId, analysisResponse.modelId) &&
        Objects.equals(this.encoding, analysisResponse.encoding) &&
        Objects.equals(this.invoker, analysisResponse.invoker) &&
        Objects.equals(this.status, analysisResponse.status) &&
        Objects.equals(this.errorCode, analysisResponse.errorCode) &&
        Objects.equals(this.unparsedFiles, analysisResponse.unparsedFiles) &&
        Objects.equals(this.analysisScope, analysisResponse.analysisScope) &&
        Objects.equals(this.changeRequest, analysisResponse.changeRequest) &&
        Objects.equals(this.changeRequestStatus, analysisResponse.changeRequestStatus) &&
        Objects.equals(this.branchName, analysisResponse.branchName) &&
        Objects.equals(this.auditResult, analysisResponse.auditResult) &&
        Objects.equals(this.analysisBusinessValue, analysisResponse.analysisBusinessValue) &&
        Objects.equals(this.analysisProvider, analysisResponse.analysisProvider) &&
        Objects.equals(this.analysisPortfolios, analysisResponse.analysisPortfolios) &&
        Objects.equals(this.metrics, analysisResponse.metrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, label, creationDate, qualityModel, modelId, encoding, invoker, status, errorCode, unparsedFiles, analysisScope, changeRequest, changeRequestStatus, branchName, auditResult, analysisBusinessValue, analysisProvider, analysisPortfolios, metrics);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalysisResponse {\n");
    
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    qualityModel: ").append(toIndentedString(qualityModel)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    invoker: ").append(toIndentedString(invoker)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    unparsedFiles: ").append(toIndentedString(unparsedFiles)).append("\n");
    sb.append("    analysisScope: ").append(toIndentedString(analysisScope)).append("\n");
    sb.append("    changeRequest: ").append(toIndentedString(changeRequest)).append("\n");
    sb.append("    changeRequestStatus: ").append(toIndentedString(changeRequestStatus)).append("\n");
    sb.append("    branchName: ").append(toIndentedString(branchName)).append("\n");
    sb.append("    auditResult: ").append(toIndentedString(auditResult)).append("\n");
    sb.append("    analysisBusinessValue: ").append(toIndentedString(analysisBusinessValue)).append("\n");
    sb.append("    analysisProvider: ").append(toIndentedString(analysisProvider)).append("\n");
    sb.append("    analysisPortfolios: ").append(toIndentedString(analysisPortfolios)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

