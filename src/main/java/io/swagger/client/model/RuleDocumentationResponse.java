/*
 * Kiuwan REST API
 * Kiuwan REST API specification
 *
 * OpenAPI spec version: 2.8.2004.3-SNAPSHOT
 * Contact: support@kiuwan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * RuleDocumentationResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-14T08:41:48.057Z")
public class RuleDocumentationResponse {
  @SerializedName("description")
  private String description = null;

  @SerializedName("code")
  private String code = null;

  @SerializedName("references")
  private String references = null;

  @SerializedName("benefits")
  private String benefits = null;

  @SerializedName("drawbacks")
  private String drawbacks = null;

  @SerializedName("violationCode")
  private String violationCode = null;

  @SerializedName("fixedCode")
  private String fixedCode = null;

  @SerializedName("tags")
  private List<String> tags = null;

  @SerializedName("normatives")
  private List<String> normatives = null;

  public RuleDocumentationResponse description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Rule description
   * @return description
  **/
  @ApiModelProperty(example = "Software places user-controlled input in page content. An attacker could inject browser script code that is executed in the client browser. The end-user is the attacked subject, and the software is the vehicle for the attack. There are two main kinds of XSS:  * Reflected XSS: Attacker causes victim to supply malicious content to a vulnerable web application, which   renders HTML content embedding a malicious script executed in victim's browser. A variation of this is named   DOM-based XSS, where the vulnerable software does not generate content depending on user input but include   script code that use user-controlled input.  * Persisted XSS: Attacker provides malicious content to vulnerable application. When other user access to   vulnerable pages that embed without proper neutralization the attacker content, script code is executed in the   victim's browser.  The script executed in the victim's browser could perform malicious activities.  Many browsers could limit the damage via security restrictions (e.g. 'same origin policy'), but user browsers generally allow scripting languages (e.g. JavaScript) in their browsers (disabling JavaScript severely limits a web site).", value = "Rule description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public RuleDocumentationResponse code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Rule code
   * @return code
  **/
  @ApiModelProperty(example = "OPT.JAVA.SEC_JAVA.CrossSiteScriptingRule", value = "Rule code")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public RuleDocumentationResponse references(String references) {
    this.references = references;
    return this;
  }

   /**
   * Comma separated list of rule references
   * @return references
  **/
  @ApiModelProperty(example = "http://cwe.mitre.org/data/definitions/79.html,https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet,https://www.google.es/about/appsecurity/learning/xss/,https://www.securecoding.cert.org/confluence/display/java/IDS51-J.+Properly+encode+or+escape+output", value = "Comma separated list of rule references")
  public String getReferences() {
    return references;
  }

  public void setReferences(String references) {
    this.references = references;
  }

  public RuleDocumentationResponse benefits(String benefits) {
    this.benefits = benefits;
    return this;
  }

   /**
   * Rule benefits
   * @return benefits
  **/
  @ApiModelProperty(value = "Rule benefits")
  public String getBenefits() {
    return benefits;
  }

  public void setBenefits(String benefits) {
    this.benefits = benefits;
  }

  public RuleDocumentationResponse drawbacks(String drawbacks) {
    this.drawbacks = drawbacks;
    return this;
  }

   /**
   * Rule drawbacks
   * @return drawbacks
  **/
  @ApiModelProperty(value = "Rule drawbacks")
  public String getDrawbacks() {
    return drawbacks;
  }

  public void setDrawbacks(String drawbacks) {
    this.drawbacks = drawbacks;
  }

  public RuleDocumentationResponse violationCode(String violationCode) {
    this.violationCode = violationCode;
    return this;
  }

   /**
   * Violation code example
   * @return violationCode
  **/
  @ApiModelProperty(example = "import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.io.PrintWriter;  public class CrossSiteScriptingCode {   public void directXSS(HttpServletRequest req, HttpServletResponse res) throws IOException {     PrintWriter w = res.getWriter();     w.println( req.getParameter(\\\"input\\\") ); // VIOLATION   } }", value = "Violation code example")
  public String getViolationCode() {
    return violationCode;
  }

  public void setViolationCode(String violationCode) {
    this.violationCode = violationCode;
  }

  public RuleDocumentationResponse fixedCode(String fixedCode) {
    this.fixedCode = fixedCode;
    return this;
  }

   /**
   * Fixed code example
   * @return fixedCode
  **/
  @ApiModelProperty(example = "import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.io.PrintWriter; import org.owasp.html.*;  public class CrossSiteScriptingCode {   public void directXSS(HttpServletRequest req, HttpServletResponse res) throws IOException {     PrintWriter w = res.getWriter();     // OWASP Java HTML Sanitizer (upgrade to r88 or later)     // Use your own security library if needed     PolicyFactory policy = Sanitizers.FORMATTING.and(Sanitizers.LINKS);     String safeHTML = policy.sanitize( req.getParameter(\\\"input\\\") );     w.println(safeHTML); // OK   } }", value = "Fixed code example")
  public String getFixedCode() {
    return fixedCode;
  }

  public void setFixedCode(String fixedCode) {
    this.fixedCode = fixedCode;
  }

  public RuleDocumentationResponse tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public RuleDocumentationResponse addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Rule tags list
   * @return tags
  **/
  @ApiModelProperty(example = "\"['CWEScope:Access-Control','CWEScope:Availability','CWEScope:Confidentiality','CWEScope:Integrity','essential']\"", value = "Rule tags list")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  public RuleDocumentationResponse normatives(List<String> normatives) {
    this.normatives = normatives;
    return this;
  }

  public RuleDocumentationResponse addNormativesItem(String normativesItem) {
    if (this.normatives == null) {
      this.normatives = new ArrayList<String>();
    }
    this.normatives.add(normativesItem);
    return this;
  }

   /**
   * Rule normatives list
   * @return normatives
  **/
  @ApiModelProperty(example = "\"['CERT-J:IDS51-J','CWE:79','OWASP:2013:A3','OWASP:2017:A7','OWASP-M:2014:M7','PCI-DSS:6.5.7','SANS25:2010:1','SANS25:2011:4','WASC:08']\"", value = "Rule normatives list")
  public List<String> getNormatives() {
    return normatives;
  }

  public void setNormatives(List<String> normatives) {
    this.normatives = normatives;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleDocumentationResponse ruleDocumentationResponse = (RuleDocumentationResponse) o;
    return Objects.equals(this.description, ruleDocumentationResponse.description) &&
        Objects.equals(this.code, ruleDocumentationResponse.code) &&
        Objects.equals(this.references, ruleDocumentationResponse.references) &&
        Objects.equals(this.benefits, ruleDocumentationResponse.benefits) &&
        Objects.equals(this.drawbacks, ruleDocumentationResponse.drawbacks) &&
        Objects.equals(this.violationCode, ruleDocumentationResponse.violationCode) &&
        Objects.equals(this.fixedCode, ruleDocumentationResponse.fixedCode) &&
        Objects.equals(this.tags, ruleDocumentationResponse.tags) &&
        Objects.equals(this.normatives, ruleDocumentationResponse.normatives);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, code, references, benefits, drawbacks, violationCode, fixedCode, tags, normatives);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleDocumentationResponse {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    benefits: ").append(toIndentedString(benefits)).append("\n");
    sb.append("    drawbacks: ").append(toIndentedString(drawbacks)).append("\n");
    sb.append("    violationCode: ").append(toIndentedString(violationCode)).append("\n");
    sb.append("    fixedCode: ").append(toIndentedString(fixedCode)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    normatives: ").append(toIndentedString(normatives)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

