/*
 * Kiuwan REST API
 * Kiuwan REST API specification
 *
 * OpenAPI spec version: 2.8.2004.3-SNAPSHOT
 * Contact: support@kiuwan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.PortfolioDefinitionData;
import io.swagger.client.model.UserPortfolioRoleData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PortfolioApi {
    private ApiClient apiClient;

    public PortfolioApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PortfolioApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createPortfolioGroups
     * @param body Portfolio to be saved (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPortfolioGroupsCall(PortfolioDefinitionData body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/portfolios";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPortfolioGroupsValidateBeforeCall(PortfolioDefinitionData body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPortfolioGroups(Async)");
        }
        

        com.squareup.okhttp.Call call = createPortfolioGroupsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create or update portfolio definitions
     * Creates or update portfolio definitions for an account.
     * @param body Portfolio to be saved (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createPortfolioGroups(PortfolioDefinitionData body) throws ApiException {
        createPortfolioGroupsWithHttpInfo(body);
    }

    /**
     * Create or update portfolio definitions
     * Creates or update portfolio definitions for an account.
     * @param body Portfolio to be saved (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createPortfolioGroupsWithHttpInfo(PortfolioDefinitionData body) throws ApiException {
        com.squareup.okhttp.Call call = createPortfolioGroupsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create or update portfolio definitions (asynchronously)
     * Creates or update portfolio definitions for an account.
     * @param body Portfolio to be saved (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPortfolioGroupsAsync(PortfolioDefinitionData body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPortfolioGroupsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for existsPortfolioValue
     * @param portfolio Portfolio name (required)
     * @param value Portfolio value (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call existsPortfolioValueCall(String portfolio, String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolio}/{value}/exists"
            .replaceAll("\\{" + "portfolio" + "\\}", apiClient.escapeString(portfolio.toString()))
            .replaceAll("\\{" + "value" + "\\}", apiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call existsPortfolioValueValidateBeforeCall(String portfolio, String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolio' is set
        if (portfolio == null) {
            throw new ApiException("Missing the required parameter 'portfolio' when calling existsPortfolioValue(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling existsPortfolioValue(Async)");
        }
        

        com.squareup.okhttp.Call call = existsPortfolioValueCall(portfolio, value, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get if portfolio and portfolio value exists
     * Check if portfolio and portfolio value exists. This endpoint return an error code 15 if the portfolio name not exists and return true if exists the pair protfolio name and value and false if exists portfolio name but not exists the portfolio value for this portfolio name.
     * @param portfolio Portfolio name (required)
     * @param value Portfolio value (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean existsPortfolioValue(String portfolio, String value) throws ApiException {
        ApiResponse<Boolean> resp = existsPortfolioValueWithHttpInfo(portfolio, value);
        return resp.getData();
    }

    /**
     * Get if portfolio and portfolio value exists
     * Check if portfolio and portfolio value exists. This endpoint return an error code 15 if the portfolio name not exists and return true if exists the pair protfolio name and value and false if exists portfolio name but not exists the portfolio value for this portfolio name.
     * @param portfolio Portfolio name (required)
     * @param value Portfolio value (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> existsPortfolioValueWithHttpInfo(String portfolio, String value) throws ApiException {
        com.squareup.okhttp.Call call = existsPortfolioValueValidateBeforeCall(portfolio, value, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get if portfolio and portfolio value exists (asynchronously)
     * Check if portfolio and portfolio value exists. This endpoint return an error code 15 if the portfolio name not exists and return true if exists the pair protfolio name and value and false if exists portfolio name but not exists the portfolio value for this portfolio name.
     * @param portfolio Portfolio name (required)
     * @param value Portfolio value (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call existsPortfolioValueAsync(String portfolio, String value, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = existsPortfolioValueValidateBeforeCall(portfolio, value, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioGroups
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioGroupsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioGroupsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPortfolioGroupsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get portfolio definitions
     * Obtains the portfolio definitions of an account.
     * @return List&lt;PortfolioDefinitionData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PortfolioDefinitionData> getPortfolioGroups() throws ApiException {
        ApiResponse<List<PortfolioDefinitionData>> resp = getPortfolioGroupsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get portfolio definitions
     * Obtains the portfolio definitions of an account.
     * @return ApiResponse&lt;List&lt;PortfolioDefinitionData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PortfolioDefinitionData>> getPortfolioGroupsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioGroupsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<PortfolioDefinitionData>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get portfolio definitions (asynchronously)
     * Obtains the portfolio definitions of an account.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioGroupsAsync(final ApiCallback<List<PortfolioDefinitionData>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioGroupsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PortfolioDefinitionData>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioValuesByName
     * @param portfolio Portfolio name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioValuesByNameCall(String portfolio, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolio}/values/list"
            .replaceAll("\\{" + "portfolio" + "\\}", apiClient.escapeString(portfolio.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioValuesByNameValidateBeforeCall(String portfolio, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolio' is set
        if (portfolio == null) {
            throw new ApiException("Missing the required parameter 'portfolio' when calling getPortfolioValuesByName(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioValuesByNameCall(portfolio, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of portfolio values by portfolio name
     * List all portfolio values asociated to portfolio name. This endpoint return an error code 15 if the portfolio name not exists, in other case, it return the list of portfolio values.
     * @param portfolio Portfolio name (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> getPortfolioValuesByName(String portfolio) throws ApiException {
        ApiResponse<List<String>> resp = getPortfolioValuesByNameWithHttpInfo(portfolio);
        return resp.getData();
    }

    /**
     * Get list of portfolio values by portfolio name
     * List all portfolio values asociated to portfolio name. This endpoint return an error code 15 if the portfolio name not exists, in other case, it return the list of portfolio values.
     * @param portfolio Portfolio name (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> getPortfolioValuesByNameWithHttpInfo(String portfolio) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioValuesByNameValidateBeforeCall(portfolio, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of portfolio values by portfolio name (asynchronously)
     * List all portfolio values asociated to portfolio name. This endpoint return an error code 15 if the portfolio name not exists, in other case, it return the list of portfolio values.
     * @param portfolio Portfolio name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioValuesByNameAsync(String portfolio, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioValuesByNameValidateBeforeCall(portfolio, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserRolesPortfolio
     * @param portfolio Portfolio name (required)
     * @param username &#39;username&#39; mask to filter results (optional)
     * @param exactUsername Indicates if the username must be equals (ignore case). Only apply if username is provided (optional)
     * @param portfolioValue &#39;portfolioValue&#39; mask to filter results (optional)
     * @param exactPortfolioValue Indicates if the portfolioValue must be equals (ignore case). Only apply if portfolioValue is provided (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserRolesPortfolioCall(String portfolio, String username, Boolean exactUsername, String portfolioValue, Boolean exactPortfolioValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolio}/users/roles"
            .replaceAll("\\{" + "portfolio" + "\\}", apiClient.escapeString(portfolio.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (exactUsername != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exactUsername", exactUsername));
        if (portfolioValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioValue", portfolioValue));
        if (exactPortfolioValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exactPortfolioValue", exactPortfolioValue));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserRolesPortfolioValidateBeforeCall(String portfolio, String username, Boolean exactUsername, String portfolioValue, Boolean exactPortfolioValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolio' is set
        if (portfolio == null) {
            throw new ApiException("Missing the required parameter 'portfolio' when calling getUserRolesPortfolio(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserRolesPortfolioCall(portfolio, username, exactUsername, portfolioValue, exactPortfolioValue, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get users roles by portfolio
     * List the users roles for the portfolio. Use &#39;username&#39;, &#39;exactUsername&#39;, &#39;portfolioValue&#39; and &#39;exactPortfolioValue&#39; to filter results.
     * @param portfolio Portfolio name (required)
     * @param username &#39;username&#39; mask to filter results (optional)
     * @param exactUsername Indicates if the username must be equals (ignore case). Only apply if username is provided (optional)
     * @param portfolioValue &#39;portfolioValue&#39; mask to filter results (optional)
     * @param exactPortfolioValue Indicates if the portfolioValue must be equals (ignore case). Only apply if portfolioValue is provided (optional)
     * @return List&lt;UserPortfolioRoleData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserPortfolioRoleData> getUserRolesPortfolio(String portfolio, String username, Boolean exactUsername, String portfolioValue, Boolean exactPortfolioValue) throws ApiException {
        ApiResponse<List<UserPortfolioRoleData>> resp = getUserRolesPortfolioWithHttpInfo(portfolio, username, exactUsername, portfolioValue, exactPortfolioValue);
        return resp.getData();
    }

    /**
     * Get users roles by portfolio
     * List the users roles for the portfolio. Use &#39;username&#39;, &#39;exactUsername&#39;, &#39;portfolioValue&#39; and &#39;exactPortfolioValue&#39; to filter results.
     * @param portfolio Portfolio name (required)
     * @param username &#39;username&#39; mask to filter results (optional)
     * @param exactUsername Indicates if the username must be equals (ignore case). Only apply if username is provided (optional)
     * @param portfolioValue &#39;portfolioValue&#39; mask to filter results (optional)
     * @param exactPortfolioValue Indicates if the portfolioValue must be equals (ignore case). Only apply if portfolioValue is provided (optional)
     * @return ApiResponse&lt;List&lt;UserPortfolioRoleData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserPortfolioRoleData>> getUserRolesPortfolioWithHttpInfo(String portfolio, String username, Boolean exactUsername, String portfolioValue, Boolean exactPortfolioValue) throws ApiException {
        com.squareup.okhttp.Call call = getUserRolesPortfolioValidateBeforeCall(portfolio, username, exactUsername, portfolioValue, exactPortfolioValue, null, null);
        Type localVarReturnType = new TypeToken<List<UserPortfolioRoleData>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get users roles by portfolio (asynchronously)
     * List the users roles for the portfolio. Use &#39;username&#39;, &#39;exactUsername&#39;, &#39;portfolioValue&#39; and &#39;exactPortfolioValue&#39; to filter results.
     * @param portfolio Portfolio name (required)
     * @param username &#39;username&#39; mask to filter results (optional)
     * @param exactUsername Indicates if the username must be equals (ignore case). Only apply if username is provided (optional)
     * @param portfolioValue &#39;portfolioValue&#39; mask to filter results (optional)
     * @param exactPortfolioValue Indicates if the portfolioValue must be equals (ignore case). Only apply if portfolioValue is provided (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserRolesPortfolioAsync(String portfolio, String username, Boolean exactUsername, String portfolioValue, Boolean exactPortfolioValue, final ApiCallback<List<UserPortfolioRoleData>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserRolesPortfolioValidateBeforeCall(portfolio, username, exactUsername, portfolioValue, exactPortfolioValue, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserPortfolioRoleData>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
