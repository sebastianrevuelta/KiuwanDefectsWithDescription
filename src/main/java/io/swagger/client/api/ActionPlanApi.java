/*
 * Kiuwan REST API
 * Kiuwan REST API specification
 *
 * OpenAPI spec version: 2.8.2004.3-SNAPSHOT
 * Contact: support@kiuwan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ActionPlanDefectsResponse;
import io.swagger.client.model.ActionPlanDetailResponse;
import io.swagger.client.model.ActionPlanPendingDefectsResponse;
import io.swagger.client.model.ActionPlanProgressResponse;
import io.swagger.client.model.ActionPlanRemovedDefectsResponse;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActionPlanApi {
    private ApiClient apiClient;

    public ActionPlanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActionPlanApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getActionPlan
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getActionPlanCall(String application, String name, OffsetDateTime creation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionPlan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (creation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("creation", creation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActionPlanValidateBeforeCall(String application, String name, OffsetDateTime creation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling getActionPlan(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getActionPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = getActionPlanCall(application, name, creation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get progress summary of an action plan
     * Obtains the current and the past main metrics and indicators of an application for an action plan. If there are more than one action plans with the same name, this endpoint returns the most recent action plan&#39;s information.
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @return ActionPlanProgressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActionPlanProgressResponse getActionPlan(String application, String name, OffsetDateTime creation) throws ApiException {
        ApiResponse<ActionPlanProgressResponse> resp = getActionPlanWithHttpInfo(application, name, creation);
        return resp.getData();
    }

    /**
     * Get progress summary of an action plan
     * Obtains the current and the past main metrics and indicators of an application for an action plan. If there are more than one action plans with the same name, this endpoint returns the most recent action plan&#39;s information.
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @return ApiResponse&lt;ActionPlanProgressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActionPlanProgressResponse> getActionPlanWithHttpInfo(String application, String name, OffsetDateTime creation) throws ApiException {
        com.squareup.okhttp.Call call = getActionPlanValidateBeforeCall(application, name, creation, null, null);
        Type localVarReturnType = new TypeToken<ActionPlanProgressResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get progress summary of an action plan (asynchronously)
     * Obtains the current and the past main metrics and indicators of an application for an action plan. If there are more than one action plans with the same name, this endpoint returns the most recent action plan&#39;s information.
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActionPlanAsync(String application, String name, OffsetDateTime creation, final ApiCallback<ActionPlanProgressResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActionPlanValidateBeforeCall(application, name, creation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActionPlanProgressResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getActionPlanAllDefects
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getActionPlanAllDefectsCall(String application, String name, OffsetDateTime creation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionPlan/defects/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (creation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("creation", creation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActionPlanAllDefectsValidateBeforeCall(String application, String name, OffsetDateTime creation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling getActionPlanAllDefects(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getActionPlanAllDefects(Async)");
        }
        

        com.squareup.okhttp.Call call = getActionPlanAllDefectsCall(application, name, creation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all defects of an action plan
     * Obtains all defects included in an action plan. If there are more than one action plans with the same name, this endpoint returns the most recent action plan&#39;s information.
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @return ActionPlanDefectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActionPlanDefectsResponse getActionPlanAllDefects(String application, String name, OffsetDateTime creation) throws ApiException {
        ApiResponse<ActionPlanDefectsResponse> resp = getActionPlanAllDefectsWithHttpInfo(application, name, creation);
        return resp.getData();
    }

    /**
     * Get all defects of an action plan
     * Obtains all defects included in an action plan. If there are more than one action plans with the same name, this endpoint returns the most recent action plan&#39;s information.
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @return ApiResponse&lt;ActionPlanDefectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActionPlanDefectsResponse> getActionPlanAllDefectsWithHttpInfo(String application, String name, OffsetDateTime creation) throws ApiException {
        com.squareup.okhttp.Call call = getActionPlanAllDefectsValidateBeforeCall(application, name, creation, null, null);
        Type localVarReturnType = new TypeToken<ActionPlanDefectsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all defects of an action plan (asynchronously)
     * Obtains all defects included in an action plan. If there are more than one action plans with the same name, this endpoint returns the most recent action plan&#39;s information.
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActionPlanAllDefectsAsync(String application, String name, OffsetDateTime creation, final ApiCallback<ActionPlanDefectsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActionPlanAllDefectsValidateBeforeCall(application, name, creation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActionPlanDefectsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getActionPlanPendingDefects
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param analysisLabel Analysis label. If empty it compares with last analysis (optional)
     * @param creation Action plan creation date (optional)
     * @param orderBy Sorting criteria: priority/effort (optional)
     * @param asc Sort ascending: true/false (optional)
     * @param limit Max number of defects returned (optional)
     * @param characteristics Comma-separated list of characteristics to filter by (optional)
     * @param languages Comma-separated list of languages to filter by (optional)
     * @param priorities Comma-separated list of priorities(Very low, Low, Normal, High, Very high) to filter by (optional)
     * @param fileContains Use this param to filter defects by file name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getActionPlanPendingDefectsCall(String application, String name, String analysisLabel, OffsetDateTime creation, String orderBy, Boolean asc, Integer limit, String characteristics, String languages, String priorities, String fileContains, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionPlan/defects/pending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (analysisLabel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("analysisLabel", analysisLabel));
        if (creation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("creation", creation));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (asc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asc", asc));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (characteristics != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("characteristics", characteristics));
        if (languages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("languages", languages));
        if (priorities != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("priorities", priorities));
        if (fileContains != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fileContains", fileContains));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActionPlanPendingDefectsValidateBeforeCall(String application, String name, String analysisLabel, OffsetDateTime creation, String orderBy, Boolean asc, Integer limit, String characteristics, String languages, String priorities, String fileContains, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling getActionPlanPendingDefects(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getActionPlanPendingDefects(Async)");
        }
        

        com.squareup.okhttp.Call call = getActionPlanPendingDefectsCall(application, name, analysisLabel, creation, orderBy, asc, limit, characteristics, languages, priorities, fileContains, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pending defects of an action plan
     * Obtains the pending defects of an action plan compared with a concrete analysis. If there are more than one action plans with the same name, this endpoint returns the most recent action plan&#39;s information. If there are more than one analysis with the same label, uses the most recent analysis of them.
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param analysisLabel Analysis label. If empty it compares with last analysis (optional)
     * @param creation Action plan creation date (optional)
     * @param orderBy Sorting criteria: priority/effort (optional)
     * @param asc Sort ascending: true/false (optional)
     * @param limit Max number of defects returned (optional)
     * @param characteristics Comma-separated list of characteristics to filter by (optional)
     * @param languages Comma-separated list of languages to filter by (optional)
     * @param priorities Comma-separated list of priorities(Very low, Low, Normal, High, Very high) to filter by (optional)
     * @param fileContains Use this param to filter defects by file name (optional)
     * @return ActionPlanPendingDefectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActionPlanPendingDefectsResponse getActionPlanPendingDefects(String application, String name, String analysisLabel, OffsetDateTime creation, String orderBy, Boolean asc, Integer limit, String characteristics, String languages, String priorities, String fileContains) throws ApiException {
        ApiResponse<ActionPlanPendingDefectsResponse> resp = getActionPlanPendingDefectsWithHttpInfo(application, name, analysisLabel, creation, orderBy, asc, limit, characteristics, languages, priorities, fileContains);
        return resp.getData();
    }

    /**
     * Get pending defects of an action plan
     * Obtains the pending defects of an action plan compared with a concrete analysis. If there are more than one action plans with the same name, this endpoint returns the most recent action plan&#39;s information. If there are more than one analysis with the same label, uses the most recent analysis of them.
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param analysisLabel Analysis label. If empty it compares with last analysis (optional)
     * @param creation Action plan creation date (optional)
     * @param orderBy Sorting criteria: priority/effort (optional)
     * @param asc Sort ascending: true/false (optional)
     * @param limit Max number of defects returned (optional)
     * @param characteristics Comma-separated list of characteristics to filter by (optional)
     * @param languages Comma-separated list of languages to filter by (optional)
     * @param priorities Comma-separated list of priorities(Very low, Low, Normal, High, Very high) to filter by (optional)
     * @param fileContains Use this param to filter defects by file name (optional)
     * @return ApiResponse&lt;ActionPlanPendingDefectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActionPlanPendingDefectsResponse> getActionPlanPendingDefectsWithHttpInfo(String application, String name, String analysisLabel, OffsetDateTime creation, String orderBy, Boolean asc, Integer limit, String characteristics, String languages, String priorities, String fileContains) throws ApiException {
        com.squareup.okhttp.Call call = getActionPlanPendingDefectsValidateBeforeCall(application, name, analysisLabel, creation, orderBy, asc, limit, characteristics, languages, priorities, fileContains, null, null);
        Type localVarReturnType = new TypeToken<ActionPlanPendingDefectsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pending defects of an action plan (asynchronously)
     * Obtains the pending defects of an action plan compared with a concrete analysis. If there are more than one action plans with the same name, this endpoint returns the most recent action plan&#39;s information. If there are more than one analysis with the same label, uses the most recent analysis of them.
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param analysisLabel Analysis label. If empty it compares with last analysis (optional)
     * @param creation Action plan creation date (optional)
     * @param orderBy Sorting criteria: priority/effort (optional)
     * @param asc Sort ascending: true/false (optional)
     * @param limit Max number of defects returned (optional)
     * @param characteristics Comma-separated list of characteristics to filter by (optional)
     * @param languages Comma-separated list of languages to filter by (optional)
     * @param priorities Comma-separated list of priorities(Very low, Low, Normal, High, Very high) to filter by (optional)
     * @param fileContains Use this param to filter defects by file name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActionPlanPendingDefectsAsync(String application, String name, String analysisLabel, OffsetDateTime creation, String orderBy, Boolean asc, Integer limit, String characteristics, String languages, String priorities, String fileContains, final ApiCallback<ActionPlanPendingDefectsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActionPlanPendingDefectsValidateBeforeCall(application, name, analysisLabel, creation, orderBy, asc, limit, characteristics, languages, priorities, fileContains, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActionPlanPendingDefectsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getActionPlanRemovedDefects
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param analysisLabel Analysis label. If empty it compares with last analysis (optional)
     * @param creation Action plan creation date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getActionPlanRemovedDefectsCall(String application, String name, String analysisLabel, OffsetDateTime creation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionPlan/defects/removed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (analysisLabel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("analysisLabel", analysisLabel));
        if (creation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("creation", creation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActionPlanRemovedDefectsValidateBeforeCall(String application, String name, String analysisLabel, OffsetDateTime creation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling getActionPlanRemovedDefects(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getActionPlanRemovedDefects(Async)");
        }
        

        com.squareup.okhttp.Call call = getActionPlanRemovedDefectsCall(application, name, analysisLabel, creation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get removed defects of an action plan
     * Obtains the removed defects of an action plan compared with a concrete analysis. If there are more than one action plans with the same name, this endpoint returns the most recent action plan&#39;s information. If there are more than one analysis with the same label, uses the most recent analysis of them.
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param analysisLabel Analysis label. If empty it compares with last analysis (optional)
     * @param creation Action plan creation date (optional)
     * @return ActionPlanRemovedDefectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActionPlanRemovedDefectsResponse getActionPlanRemovedDefects(String application, String name, String analysisLabel, OffsetDateTime creation) throws ApiException {
        ApiResponse<ActionPlanRemovedDefectsResponse> resp = getActionPlanRemovedDefectsWithHttpInfo(application, name, analysisLabel, creation);
        return resp.getData();
    }

    /**
     * Get removed defects of an action plan
     * Obtains the removed defects of an action plan compared with a concrete analysis. If there are more than one action plans with the same name, this endpoint returns the most recent action plan&#39;s information. If there are more than one analysis with the same label, uses the most recent analysis of them.
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param analysisLabel Analysis label. If empty it compares with last analysis (optional)
     * @param creation Action plan creation date (optional)
     * @return ApiResponse&lt;ActionPlanRemovedDefectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActionPlanRemovedDefectsResponse> getActionPlanRemovedDefectsWithHttpInfo(String application, String name, String analysisLabel, OffsetDateTime creation) throws ApiException {
        com.squareup.okhttp.Call call = getActionPlanRemovedDefectsValidateBeforeCall(application, name, analysisLabel, creation, null, null);
        Type localVarReturnType = new TypeToken<ActionPlanRemovedDefectsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get removed defects of an action plan (asynchronously)
     * Obtains the removed defects of an action plan compared with a concrete analysis. If there are more than one action plans with the same name, this endpoint returns the most recent action plan&#39;s information. If there are more than one analysis with the same label, uses the most recent analysis of them.
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param analysisLabel Analysis label. If empty it compares with last analysis (optional)
     * @param creation Action plan creation date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActionPlanRemovedDefectsAsync(String application, String name, String analysisLabel, OffsetDateTime creation, final ApiCallback<ActionPlanRemovedDefectsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActionPlanRemovedDefectsValidateBeforeCall(application, name, analysisLabel, creation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActionPlanRemovedDefectsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getActionPlans
     * @param application Application name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getActionPlansCall(String application, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionPlans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActionPlansValidateBeforeCall(String application, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling getActionPlans(Async)");
        }
        

        com.squareup.okhttp.Call call = getActionPlansCall(application, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get available action plans
     * List action plans of an application.
     * @param application Application name (required)
     * @return List&lt;ActionPlanDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ActionPlanDetailResponse> getActionPlans(String application) throws ApiException {
        ApiResponse<List<ActionPlanDetailResponse>> resp = getActionPlansWithHttpInfo(application);
        return resp.getData();
    }

    /**
     * Get available action plans
     * List action plans of an application.
     * @param application Application name (required)
     * @return ApiResponse&lt;List&lt;ActionPlanDetailResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ActionPlanDetailResponse>> getActionPlansWithHttpInfo(String application) throws ApiException {
        com.squareup.okhttp.Call call = getActionPlansValidateBeforeCall(application, null, null);
        Type localVarReturnType = new TypeToken<List<ActionPlanDetailResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get available action plans (asynchronously)
     * List action plans of an application.
     * @param application Application name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActionPlansAsync(String application, final ApiCallback<List<ActionPlanDetailResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActionPlansValidateBeforeCall(application, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ActionPlanDetailResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
