/*
 * Kiuwan REST API
 * Kiuwan REST API specification
 *
 * OpenAPI spec version: 2.8.2004.3-SNAPSHOT
 * Contact: support@kiuwan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DefectLineResponse;
import io.swagger.client.model.DefectNoteResponse;
import io.swagger.client.model.FileWithDefectsResponse;
import io.swagger.client.model.ViolatedRuleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefectApi {
    private ApiClient apiClient;

    public DefectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefectApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getDefectNotes
     * @param defectId Defect identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDefectNotesCall(Long defectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/defect/{defectId}/notes"
            .replaceAll("\\{" + "defectId" + "\\}", apiClient.escapeString(defectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDefectNotesValidateBeforeCall(Long defectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'defectId' is set
        if (defectId == null) {
            throw new ApiException("Missing the required parameter 'defectId' when calling getDefectNotes(Async)");
        }
        

        com.squareup.okhttp.Call call = getDefectNotesCall(defectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get defect notes
     * Obtains the list of notes associated to this defect.
     * @param defectId Defect identifier (required)
     * @return List&lt;DefectNoteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DefectNoteResponse> getDefectNotes(Long defectId) throws ApiException {
        ApiResponse<List<DefectNoteResponse>> resp = getDefectNotesWithHttpInfo(defectId);
        return resp.getData();
    }

    /**
     * Get defect notes
     * Obtains the list of notes associated to this defect.
     * @param defectId Defect identifier (required)
     * @return ApiResponse&lt;List&lt;DefectNoteResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DefectNoteResponse>> getDefectNotesWithHttpInfo(Long defectId) throws ApiException {
        com.squareup.okhttp.Call call = getDefectNotesValidateBeforeCall(defectId, null, null);
        Type localVarReturnType = new TypeToken<List<DefectNoteResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get defect notes (asynchronously)
     * Obtains the list of notes associated to this defect.
     * @param defectId Defect identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDefectNotesAsync(Long defectId, final ApiCallback<List<DefectNoteResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDefectNotesValidateBeforeCall(defectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DefectNoteResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getViolatedRuleFileDefectsViaGET
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param ruleCode Rule code (required)
     * @param file File name including path (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getViolatedRuleFileDefectsViaGETCall(String application, String analysisCode, String ruleCode, String file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/violatedrules/files/defects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (analysisCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("analysisCode", analysisCode));
        if (ruleCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ruleCode", ruleCode));
        if (file != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file", file));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getViolatedRuleFileDefectsViaGETValidateBeforeCall(String application, String analysisCode, String ruleCode, String file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling getViolatedRuleFileDefectsViaGET(Async)");
        }
        
        // verify the required parameter 'analysisCode' is set
        if (analysisCode == null) {
            throw new ApiException("Missing the required parameter 'analysisCode' when calling getViolatedRuleFileDefectsViaGET(Async)");
        }
        
        // verify the required parameter 'ruleCode' is set
        if (ruleCode == null) {
            throw new ApiException("Missing the required parameter 'ruleCode' when calling getViolatedRuleFileDefectsViaGET(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling getViolatedRuleFileDefectsViaGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getViolatedRuleFileDefectsViaGETCall(application, analysisCode, ruleCode, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get defects of file
     * Obtains the list of defects in a file for a concrete violated rule.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param ruleCode Rule code (required)
     * @param file File name including path (required)
     * @return List&lt;DefectLineResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DefectLineResponse> getViolatedRuleFileDefectsViaGET(String application, String analysisCode, String ruleCode, String file) throws ApiException {
        ApiResponse<List<DefectLineResponse>> resp = getViolatedRuleFileDefectsViaGETWithHttpInfo(application, analysisCode, ruleCode, file);
        return resp.getData();
    }

    /**
     * Get defects of file
     * Obtains the list of defects in a file for a concrete violated rule.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param ruleCode Rule code (required)
     * @param file File name including path (required)
     * @return ApiResponse&lt;List&lt;DefectLineResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DefectLineResponse>> getViolatedRuleFileDefectsViaGETWithHttpInfo(String application, String analysisCode, String ruleCode, String file) throws ApiException {
        com.squareup.okhttp.Call call = getViolatedRuleFileDefectsViaGETValidateBeforeCall(application, analysisCode, ruleCode, file, null, null);
        Type localVarReturnType = new TypeToken<List<DefectLineResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get defects of file (asynchronously)
     * Obtains the list of defects in a file for a concrete violated rule.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param ruleCode Rule code (required)
     * @param file File name including path (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getViolatedRuleFileDefectsViaGETAsync(String application, String analysisCode, String ruleCode, String file, final ApiCallback<List<DefectLineResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getViolatedRuleFileDefectsViaGETValidateBeforeCall(application, analysisCode, ruleCode, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DefectLineResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getViolatedRuleFilesViaGET
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param ruleCode Rule code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getViolatedRuleFilesViaGETCall(String application, String analysisCode, String ruleCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/violatedrules/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (analysisCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("analysisCode", analysisCode));
        if (ruleCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ruleCode", ruleCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getViolatedRuleFilesViaGETValidateBeforeCall(String application, String analysisCode, String ruleCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling getViolatedRuleFilesViaGET(Async)");
        }
        
        // verify the required parameter 'analysisCode' is set
        if (analysisCode == null) {
            throw new ApiException("Missing the required parameter 'analysisCode' when calling getViolatedRuleFilesViaGET(Async)");
        }
        
        // verify the required parameter 'ruleCode' is set
        if (ruleCode == null) {
            throw new ApiException("Missing the required parameter 'ruleCode' when calling getViolatedRuleFilesViaGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getViolatedRuleFilesViaGETCall(application, analysisCode, ruleCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get files of a violated rule
     * Obtains the list of files where the violated rule affects.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param ruleCode Rule code (required)
     * @return List&lt;FileWithDefectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FileWithDefectsResponse> getViolatedRuleFilesViaGET(String application, String analysisCode, String ruleCode) throws ApiException {
        ApiResponse<List<FileWithDefectsResponse>> resp = getViolatedRuleFilesViaGETWithHttpInfo(application, analysisCode, ruleCode);
        return resp.getData();
    }

    /**
     * Get files of a violated rule
     * Obtains the list of files where the violated rule affects.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param ruleCode Rule code (required)
     * @return ApiResponse&lt;List&lt;FileWithDefectsResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FileWithDefectsResponse>> getViolatedRuleFilesViaGETWithHttpInfo(String application, String analysisCode, String ruleCode) throws ApiException {
        com.squareup.okhttp.Call call = getViolatedRuleFilesViaGETValidateBeforeCall(application, analysisCode, ruleCode, null, null);
        Type localVarReturnType = new TypeToken<List<FileWithDefectsResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get files of a violated rule (asynchronously)
     * Obtains the list of files where the violated rule affects.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param ruleCode Rule code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getViolatedRuleFilesViaGETAsync(String application, String analysisCode, String ruleCode, final ApiCallback<List<FileWithDefectsResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getViolatedRuleFilesViaGETValidateBeforeCall(application, analysisCode, ruleCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FileWithDefectsResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getViolatedRules
     * @param application Application name (required)
     * @param analysisCode Analysis code (optional)
     * @param characteristic CQM characteristic (optional)
     * @param language CQM technology (optional)
     * @param priority Rule priority (optional)
     * @param vulnerabilityType Vulnerability type (optional)
     * @param tag Rule tag (optional)
     * @param onlyCodeSecurity Only Code Security rules (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getViolatedRulesCall(String application, String analysisCode, String characteristic, String language, String priority, String vulnerabilityType, String tag, Boolean onlyCodeSecurity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/violatedrules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (analysisCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("analysisCode", analysisCode));
        if (characteristic != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("characteristic", characteristic));
        if (language != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("language", language));
        if (priority != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("priority", priority));
        if (vulnerabilityType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vulnerabilityType", vulnerabilityType));
        if (tag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tag", tag));
        if (onlyCodeSecurity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onlyCodeSecurity", onlyCodeSecurity));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getViolatedRulesValidateBeforeCall(String application, String analysisCode, String characteristic, String language, String priority, String vulnerabilityType, String tag, Boolean onlyCodeSecurity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling getViolatedRules(Async)");
        }
        

        com.squareup.okhttp.Call call = getViolatedRulesCall(application, analysisCode, characteristic, language, priority, vulnerabilityType, tag, onlyCodeSecurity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get violated rules of an analysis
     * Obtains the list of violated rules of an analysis for the authenticated user.
     * @param application Application name (required)
     * @param analysisCode Analysis code (optional)
     * @param characteristic CQM characteristic (optional)
     * @param language CQM technology (optional)
     * @param priority Rule priority (optional)
     * @param vulnerabilityType Vulnerability type (optional)
     * @param tag Rule tag (optional)
     * @param onlyCodeSecurity Only Code Security rules (optional)
     * @return List&lt;ViolatedRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ViolatedRuleResponse> getViolatedRules(String application, String analysisCode, String characteristic, String language, String priority, String vulnerabilityType, String tag, Boolean onlyCodeSecurity) throws ApiException {
        ApiResponse<List<ViolatedRuleResponse>> resp = getViolatedRulesWithHttpInfo(application, analysisCode, characteristic, language, priority, vulnerabilityType, tag, onlyCodeSecurity);
        return resp.getData();
    }

    /**
     * Get violated rules of an analysis
     * Obtains the list of violated rules of an analysis for the authenticated user.
     * @param application Application name (required)
     * @param analysisCode Analysis code (optional)
     * @param characteristic CQM characteristic (optional)
     * @param language CQM technology (optional)
     * @param priority Rule priority (optional)
     * @param vulnerabilityType Vulnerability type (optional)
     * @param tag Rule tag (optional)
     * @param onlyCodeSecurity Only Code Security rules (optional)
     * @return ApiResponse&lt;List&lt;ViolatedRuleResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ViolatedRuleResponse>> getViolatedRulesWithHttpInfo(String application, String analysisCode, String characteristic, String language, String priority, String vulnerabilityType, String tag, Boolean onlyCodeSecurity) throws ApiException {
        com.squareup.okhttp.Call call = getViolatedRulesValidateBeforeCall(application, analysisCode, characteristic, language, priority, vulnerabilityType, tag, onlyCodeSecurity, null, null);
        Type localVarReturnType = new TypeToken<List<ViolatedRuleResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get violated rules of an analysis (asynchronously)
     * Obtains the list of violated rules of an analysis for the authenticated user.
     * @param application Application name (required)
     * @param analysisCode Analysis code (optional)
     * @param characteristic CQM characteristic (optional)
     * @param language CQM technology (optional)
     * @param priority Rule priority (optional)
     * @param vulnerabilityType Vulnerability type (optional)
     * @param tag Rule tag (optional)
     * @param onlyCodeSecurity Only Code Security rules (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getViolatedRulesAsync(String application, String analysisCode, String characteristic, String language, String priority, String vulnerabilityType, String tag, Boolean onlyCodeSecurity, final ApiCallback<List<ViolatedRuleResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getViolatedRulesValidateBeforeCall(application, analysisCode, characteristic, language, priority, vulnerabilityType, tag, onlyCodeSecurity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ViolatedRuleResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for muteDefect
     * @param defectId Defect identifier (required)
     * @param why Mute reason (optional)
     * @param comment Mute comment (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call muteDefectCall(Long defectId, String why, String comment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/defect/{defectId}/mute"
            .replaceAll("\\{" + "defectId" + "\\}", apiClient.escapeString(defectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (why != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("why", why));
        if (comment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("comment", comment));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call muteDefectValidateBeforeCall(Long defectId, String why, String comment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'defectId' is set
        if (defectId == null) {
            throw new ApiException("Missing the required parameter 'defectId' when calling muteDefect(Async)");
        }
        

        com.squareup.okhttp.Call call = muteDefectCall(defectId, why, comment, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create suppresion rule for a defect
     * Create a suppression rule for this defect.
     * @param defectId Defect identifier (required)
     * @param why Mute reason (optional)
     * @param comment Mute comment (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void muteDefect(Long defectId, String why, String comment) throws ApiException {
        muteDefectWithHttpInfo(defectId, why, comment);
    }

    /**
     * Create suppresion rule for a defect
     * Create a suppression rule for this defect.
     * @param defectId Defect identifier (required)
     * @param why Mute reason (optional)
     * @param comment Mute comment (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> muteDefectWithHttpInfo(Long defectId, String why, String comment) throws ApiException {
        com.squareup.okhttp.Call call = muteDefectValidateBeforeCall(defectId, why, comment, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create suppresion rule for a defect (asynchronously)
     * Create a suppression rule for this defect.
     * @param defectId Defect identifier (required)
     * @param why Mute reason (optional)
     * @param comment Mute comment (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call muteDefectAsync(Long defectId, String why, String comment, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = muteDefectValidateBeforeCall(defectId, why, comment, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateStatus
     * @param defectId Defect identifier (required)
     * @param status Defect status (required)
     * @param note Note detail (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStatusCall(Long defectId, String status, String note, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/defect/{defectId}/status"
            .replaceAll("\\{" + "defectId" + "\\}", apiClient.escapeString(defectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (note != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("note", note));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStatusValidateBeforeCall(Long defectId, String status, String note, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'defectId' is set
        if (defectId == null) {
            throw new ApiException("Missing the required parameter 'defectId' when calling updateStatus(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling updateStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = updateStatusCall(defectId, status, note, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the status of a defect
     * Update status of this defect and add a note, possible status are (NONE, TO_REVIEW, REVIEWED)
     * @param defectId Defect identifier (required)
     * @param status Defect status (required)
     * @param note Note detail (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateStatus(Long defectId, String status, String note) throws ApiException {
        updateStatusWithHttpInfo(defectId, status, note);
    }

    /**
     * Update the status of a defect
     * Update status of this defect and add a note, possible status are (NONE, TO_REVIEW, REVIEWED)
     * @param defectId Defect identifier (required)
     * @param status Defect status (required)
     * @param note Note detail (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateStatusWithHttpInfo(Long defectId, String status, String note) throws ApiException {
        com.squareup.okhttp.Call call = updateStatusValidateBeforeCall(defectId, status, note, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update the status of a defect (asynchronously)
     * Update status of this defect and add a note, possible status are (NONE, TO_REVIEW, REVIEWED)
     * @param defectId Defect identifier (required)
     * @param status Defect status (required)
     * @param note Note detail (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStatusAsync(Long defectId, String status, String note, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStatusValidateBeforeCall(defectId, status, note, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
