/*
 * Kiuwan REST API
 * Kiuwan REST API specification
 *
 * OpenAPI spec version: 2.8.2004.3-SNAPSHOT
 * Contact: support@kiuwan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AnalysisDefectsResponse;
import io.swagger.client.model.ApplicationResponse;
import io.swagger.client.model.DefectsKeptInCommonDetailResponse;
import io.swagger.client.model.Scan;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationApi {
    private ApiClient apiClient;

    public ApplicationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for downloadSuppressions
     * @param application Application name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadSuppressionsCall(String application, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qualitymodel/suppressions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call downloadSuppressionsValidateBeforeCall(String application, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling downloadSuppressions(Async)");
        }
        

        com.squareup.okhttp.Call call = downloadSuppressionsCall(application, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get suppression rules
     * Get suppression rules for application given as parameter.
     * @param application Application name (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String downloadSuppressions(String application) throws ApiException {
        ApiResponse<String> resp = downloadSuppressionsWithHttpInfo(application);
        return resp.getData();
    }

    /**
     * Get suppression rules
     * Get suppression rules for application given as parameter.
     * @param application Application name (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> downloadSuppressionsWithHttpInfo(String application) throws ApiException {
        com.squareup.okhttp.Call call = downloadSuppressionsValidateBeforeCall(application, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get suppression rules (asynchronously)
     * Get suppression rules for application given as parameter.
     * @param application Application name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadSuppressionsAsync(String application, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadSuppressionsValidateBeforeCall(application, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApplications
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApplicationsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApplicationsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getApplicationsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get applications
     * Retrieves applications for the authenticated user.
     * @return List&lt;ApplicationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ApplicationResponse> getApplications() throws ApiException {
        ApiResponse<List<ApplicationResponse>> resp = getApplicationsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get applications
     * Retrieves applications for the authenticated user.
     * @return ApiResponse&lt;List&lt;ApplicationResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ApplicationResponse>> getApplicationsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getApplicationsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<ApplicationResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get applications (asynchronously)
     * Retrieves applications for the authenticated user.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApplicationsAsync(final ApiCallback<List<ApplicationResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApplicationsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ApplicationResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApplicationsList
     * @param applicationName Application name to filter (optional)
     * @param exactApplicationName Indicates if the applicationName must be equals (ignore case). Only apply if applicationName is provided (optional)
     * @param initDateAnalysis Initial date to start search applications that are analyzed after this date (optional)
     * @param endDateAnalysis End date to start search applications that are analyzed before this date (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many applications in each page (defaults to 500) (optional, default to 500)
     * @param orderBy &#39;Order by&#39; for results (optional)
     * @param asc Ascending or descending order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApplicationsListCall(String applicationName, Boolean exactApplicationName, String initDateAnalysis, String endDateAnalysis, Integer page, Integer count, String orderBy, Boolean asc, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (applicationName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("applicationName", applicationName));
        if (exactApplicationName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exactApplicationName", exactApplicationName));
        if (initDateAnalysis != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("initDateAnalysis", initDateAnalysis));
        if (endDateAnalysis != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDateAnalysis", endDateAnalysis));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (asc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asc", asc));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApplicationsListValidateBeforeCall(String applicationName, Boolean exactApplicationName, String initDateAnalysis, String endDateAnalysis, Integer page, Integer count, String orderBy, Boolean asc, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getApplicationsListCall(applicationName, exactApplicationName, initDateAnalysis, endDateAnalysis, page, count, orderBy, asc, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get applications filtered
     * Retrieves applications for the authenticated user filtered.
     * @param applicationName Application name to filter (optional)
     * @param exactApplicationName Indicates if the applicationName must be equals (ignore case). Only apply if applicationName is provided (optional)
     * @param initDateAnalysis Initial date to start search applications that are analyzed after this date (optional)
     * @param endDateAnalysis End date to start search applications that are analyzed before this date (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many applications in each page (defaults to 500) (optional, default to 500)
     * @param orderBy &#39;Order by&#39; for results (optional)
     * @param asc Ascending or descending order (optional)
     * @return List&lt;ApplicationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ApplicationResponse> getApplicationsList(String applicationName, Boolean exactApplicationName, String initDateAnalysis, String endDateAnalysis, Integer page, Integer count, String orderBy, Boolean asc) throws ApiException {
        ApiResponse<List<ApplicationResponse>> resp = getApplicationsListWithHttpInfo(applicationName, exactApplicationName, initDateAnalysis, endDateAnalysis, page, count, orderBy, asc);
        return resp.getData();
    }

    /**
     * Get applications filtered
     * Retrieves applications for the authenticated user filtered.
     * @param applicationName Application name to filter (optional)
     * @param exactApplicationName Indicates if the applicationName must be equals (ignore case). Only apply if applicationName is provided (optional)
     * @param initDateAnalysis Initial date to start search applications that are analyzed after this date (optional)
     * @param endDateAnalysis End date to start search applications that are analyzed before this date (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many applications in each page (defaults to 500) (optional, default to 500)
     * @param orderBy &#39;Order by&#39; for results (optional)
     * @param asc Ascending or descending order (optional)
     * @return ApiResponse&lt;List&lt;ApplicationResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ApplicationResponse>> getApplicationsListWithHttpInfo(String applicationName, Boolean exactApplicationName, String initDateAnalysis, String endDateAnalysis, Integer page, Integer count, String orderBy, Boolean asc) throws ApiException {
        com.squareup.okhttp.Call call = getApplicationsListValidateBeforeCall(applicationName, exactApplicationName, initDateAnalysis, endDateAnalysis, page, count, orderBy, asc, null, null);
        Type localVarReturnType = new TypeToken<List<ApplicationResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get applications filtered (asynchronously)
     * Retrieves applications for the authenticated user filtered.
     * @param applicationName Application name to filter (optional)
     * @param exactApplicationName Indicates if the applicationName must be equals (ignore case). Only apply if applicationName is provided (optional)
     * @param initDateAnalysis Initial date to start search applications that are analyzed after this date (optional)
     * @param endDateAnalysis End date to start search applications that are analyzed before this date (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many applications in each page (defaults to 500) (optional, default to 500)
     * @param orderBy &#39;Order by&#39; for results (optional)
     * @param asc Ascending or descending order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApplicationsListAsync(String applicationName, Boolean exactApplicationName, String initDateAnalysis, String endDateAnalysis, Integer page, Integer count, String orderBy, Boolean asc, final ApiCallback<List<ApplicationResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApplicationsListValidateBeforeCall(applicationName, exactApplicationName, initDateAnalysis, endDateAnalysis, page, count, orderBy, asc, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ApplicationResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDefects
     * @param application Application name (required)
     * @param characteristics Comma-separated list of characteristics to filter by (optional)
     * @param languages Comma-separated list of languages to filter by (optional)
     * @param priorities Comma-separated list of priorities(Very low, Low, Normal, High, Very high) to filter by (optional)
     * @param fileContains Use this param to filter defects by file name (optional)
     * @param orderBy Sorting criteria (one of &#39;priority&#39; or &#39;effort&#39;) (optional)
     * @param asc Set to true to sort ascending (default is not set), false for descending (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many defects in each page (defaults to 500) (optional, default to 500)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDefectsCall(String application, String characteristics, String languages, String priorities, String fileContains, String orderBy, Boolean asc, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/defects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (characteristics != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("characteristics", characteristics));
        if (languages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("languages", languages));
        if (priorities != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("priorities", priorities));
        if (fileContains != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fileContains", fileContains));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (asc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asc", asc));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDefectsValidateBeforeCall(String application, String characteristics, String languages, String priorities, String fileContains, String orderBy, Boolean asc, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling getDefects(Async)");
        }
        

        com.squareup.okhttp.Call call = getDefectsCall(application, characteristics, languages, priorities, fileContains, orderBy, asc, page, count, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of application defects
     * List application defects for the indicated application.
     * @param application Application name (required)
     * @param characteristics Comma-separated list of characteristics to filter by (optional)
     * @param languages Comma-separated list of languages to filter by (optional)
     * @param priorities Comma-separated list of priorities(Very low, Low, Normal, High, Very high) to filter by (optional)
     * @param fileContains Use this param to filter defects by file name (optional)
     * @param orderBy Sorting criteria (one of &#39;priority&#39; or &#39;effort&#39;) (optional)
     * @param asc Set to true to sort ascending (default is not set), false for descending (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many defects in each page (defaults to 500) (optional, default to 500)
     * @return AnalysisDefectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnalysisDefectsResponse getDefects(String application, String characteristics, String languages, String priorities, String fileContains, String orderBy, Boolean asc, Integer page, Integer count) throws ApiException {
        ApiResponse<AnalysisDefectsResponse> resp = getDefectsWithHttpInfo(application, characteristics, languages, priorities, fileContains, orderBy, asc, page, count);
        return resp.getData();
    }

    /**
     * Get list of application defects
     * List application defects for the indicated application.
     * @param application Application name (required)
     * @param characteristics Comma-separated list of characteristics to filter by (optional)
     * @param languages Comma-separated list of languages to filter by (optional)
     * @param priorities Comma-separated list of priorities(Very low, Low, Normal, High, Very high) to filter by (optional)
     * @param fileContains Use this param to filter defects by file name (optional)
     * @param orderBy Sorting criteria (one of &#39;priority&#39; or &#39;effort&#39;) (optional)
     * @param asc Set to true to sort ascending (default is not set), false for descending (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many defects in each page (defaults to 500) (optional, default to 500)
     * @return ApiResponse&lt;AnalysisDefectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnalysisDefectsResponse> getDefectsWithHttpInfo(String application, String characteristics, String languages, String priorities, String fileContains, String orderBy, Boolean asc, Integer page, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = getDefectsValidateBeforeCall(application, characteristics, languages, priorities, fileContains, orderBy, asc, page, count, null, null);
        Type localVarReturnType = new TypeToken<AnalysisDefectsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of application defects (asynchronously)
     * List application defects for the indicated application.
     * @param application Application name (required)
     * @param characteristics Comma-separated list of characteristics to filter by (optional)
     * @param languages Comma-separated list of languages to filter by (optional)
     * @param priorities Comma-separated list of priorities(Very low, Low, Normal, High, Very high) to filter by (optional)
     * @param fileContains Use this param to filter defects by file name (optional)
     * @param orderBy Sorting criteria (one of &#39;priority&#39; or &#39;effort&#39;) (optional)
     * @param asc Set to true to sort ascending (default is not set), false for descending (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many defects in each page (defaults to 500) (optional, default to 500)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDefectsAsync(String application, String characteristics, String languages, String priorities, String fileContains, String orderBy, Boolean asc, Integer page, Integer count, final ApiCallback<AnalysisDefectsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDefectsValidateBeforeCall(application, characteristics, languages, priorities, fileContains, orderBy, asc, page, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnalysisDefectsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDefectsStillOpen
     * @param application Application Name (required)
     * @param sinceDate Defects open since this date (optional)
     * @param sinceAnalysisCode Find defects still open at this analyis (optional)
     * @param atAnalysisCode Find defects that were already open on this Analysis (optional)
     * @param onlyCodeSecurity Only Defects on Code Security rules (optional)
     * @param withRuleTags Only Defects Open from the Rules with the matching tags (split by &#39;,&#39;) (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many defects in each page (defaults to 500) (optional, default to 500)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDefectsStillOpenCall(String application, String sinceDate, String sinceAnalysisCode, String atAnalysisCode, Boolean onlyCodeSecurity, String withRuleTags, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/defects/stillopen";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (sinceDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sinceDate", sinceDate));
        if (sinceAnalysisCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sinceAnalysisCode", sinceAnalysisCode));
        if (atAnalysisCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("atAnalysisCode", atAnalysisCode));
        if (onlyCodeSecurity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onlyCodeSecurity", onlyCodeSecurity));
        if (withRuleTags != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("withRuleTags", withRuleTags));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDefectsStillOpenValidateBeforeCall(String application, String sinceDate, String sinceAnalysisCode, String atAnalysisCode, Boolean onlyCodeSecurity, String withRuleTags, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling getDefectsStillOpen(Async)");
        }
        

        com.squareup.okhttp.Call call = getDefectsStillOpenCall(application, sinceDate, sinceAnalysisCode, atAnalysisCode, onlyCodeSecurity, withRuleTags, page, count, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Application Defects Still Open since date
     * Get Application defects still open on latest analysis( or atAnalysisCode if provided) sinceDate (or previous sinceAnalysisCode if provided). Can be filtered by onlySecurity or by withRuleTag. Paginated
     * @param application Application Name (required)
     * @param sinceDate Defects open since this date (optional)
     * @param sinceAnalysisCode Find defects still open at this analyis (optional)
     * @param atAnalysisCode Find defects that were already open on this Analysis (optional)
     * @param onlyCodeSecurity Only Defects on Code Security rules (optional)
     * @param withRuleTags Only Defects Open from the Rules with the matching tags (split by &#39;,&#39;) (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many defects in each page (defaults to 500) (optional, default to 500)
     * @return DefectsKeptInCommonDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DefectsKeptInCommonDetailResponse getDefectsStillOpen(String application, String sinceDate, String sinceAnalysisCode, String atAnalysisCode, Boolean onlyCodeSecurity, String withRuleTags, Integer page, Integer count) throws ApiException {
        ApiResponse<DefectsKeptInCommonDetailResponse> resp = getDefectsStillOpenWithHttpInfo(application, sinceDate, sinceAnalysisCode, atAnalysisCode, onlyCodeSecurity, withRuleTags, page, count);
        return resp.getData();
    }

    /**
     * Get Application Defects Still Open since date
     * Get Application defects still open on latest analysis( or atAnalysisCode if provided) sinceDate (or previous sinceAnalysisCode if provided). Can be filtered by onlySecurity or by withRuleTag. Paginated
     * @param application Application Name (required)
     * @param sinceDate Defects open since this date (optional)
     * @param sinceAnalysisCode Find defects still open at this analyis (optional)
     * @param atAnalysisCode Find defects that were already open on this Analysis (optional)
     * @param onlyCodeSecurity Only Defects on Code Security rules (optional)
     * @param withRuleTags Only Defects Open from the Rules with the matching tags (split by &#39;,&#39;) (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many defects in each page (defaults to 500) (optional, default to 500)
     * @return ApiResponse&lt;DefectsKeptInCommonDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DefectsKeptInCommonDetailResponse> getDefectsStillOpenWithHttpInfo(String application, String sinceDate, String sinceAnalysisCode, String atAnalysisCode, Boolean onlyCodeSecurity, String withRuleTags, Integer page, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = getDefectsStillOpenValidateBeforeCall(application, sinceDate, sinceAnalysisCode, atAnalysisCode, onlyCodeSecurity, withRuleTags, page, count, null, null);
        Type localVarReturnType = new TypeToken<DefectsKeptInCommonDetailResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Application Defects Still Open since date (asynchronously)
     * Get Application defects still open on latest analysis( or atAnalysisCode if provided) sinceDate (or previous sinceAnalysisCode if provided). Can be filtered by onlySecurity or by withRuleTag. Paginated
     * @param application Application Name (required)
     * @param sinceDate Defects open since this date (optional)
     * @param sinceAnalysisCode Find defects still open at this analyis (optional)
     * @param atAnalysisCode Find defects that were already open on this Analysis (optional)
     * @param onlyCodeSecurity Only Defects on Code Security rules (optional)
     * @param withRuleTags Only Defects Open from the Rules with the matching tags (split by &#39;,&#39;) (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many defects in each page (defaults to 500) (optional, default to 500)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDefectsStillOpenAsync(String application, String sinceDate, String sinceAnalysisCode, String atAnalysisCode, Boolean onlyCodeSecurity, String withRuleTags, Integer page, Integer count, final ApiCallback<DefectsKeptInCommonDetailResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDefectsStillOpenValidateBeforeCall(application, sinceDate, sinceAnalysisCode, atAnalysisCode, onlyCodeSecurity, withRuleTags, page, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DefectsKeptInCommonDetailResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMetricsMap
     * @param code Analysis code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMetricsMapCall(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (code != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("code", code));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMetricsMapValidateBeforeCall(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getMetricsMap(Async)");
        }
        

        com.squareup.okhttp.Call call = getMetricsMapCall(code, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get analysis global metrics
     * Obtains the global metrics of indicated analysis.
     * @param code Analysis code (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> getMetricsMap(String code) throws ApiException {
        ApiResponse<Map<String, Object>> resp = getMetricsMapWithHttpInfo(code);
        return resp.getData();
    }

    /**
     * Get analysis global metrics
     * Obtains the global metrics of indicated analysis.
     * @param code Analysis code (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> getMetricsMapWithHttpInfo(String code) throws ApiException {
        com.squareup.okhttp.Call call = getMetricsMapValidateBeforeCall(code, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get analysis global metrics (asynchronously)
     * Obtains the global metrics of indicated analysis.
     * @param code Analysis code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMetricsMapAsync(String code, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMetricsMapValidateBeforeCall(code, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreadfixFindings
     * @param application Application name (optional)
     * @param code Analysis code (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreadfixFindingsCall(String application, String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/defects/export/threadfix";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (code != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("code", code));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreadfixFindingsValidateBeforeCall(String application, String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getThreadfixFindingsCall(application, code, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of application vulnerabilities in Threadfix format
     * List application vulnerabilities in Threadfix format for the given application or analysis code.
     * @param application Application name (optional)
     * @param code Analysis code (optional)
     * @return Scan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Scan getThreadfixFindings(String application, String code) throws ApiException {
        ApiResponse<Scan> resp = getThreadfixFindingsWithHttpInfo(application, code);
        return resp.getData();
    }

    /**
     * Get list of application vulnerabilities in Threadfix format
     * List application vulnerabilities in Threadfix format for the given application or analysis code.
     * @param application Application name (optional)
     * @param code Analysis code (optional)
     * @return ApiResponse&lt;Scan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Scan> getThreadfixFindingsWithHttpInfo(String application, String code) throws ApiException {
        com.squareup.okhttp.Call call = getThreadfixFindingsValidateBeforeCall(application, code, null, null);
        Type localVarReturnType = new TypeToken<Scan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of application vulnerabilities in Threadfix format (asynchronously)
     * List application vulnerabilities in Threadfix format for the given application or analysis code.
     * @param application Application name (optional)
     * @param code Analysis code (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreadfixFindingsAsync(String application, String code, final ApiCallback<Scan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreadfixFindingsValidateBeforeCall(application, code, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Scan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
