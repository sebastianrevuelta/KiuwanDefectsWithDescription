/*
 * Kiuwan REST API
 * Kiuwan REST API specification
 *
 * OpenAPI spec version: 2.8.2004.3-SNAPSHOT
 * Contact: support@kiuwan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AuditResultResponse;
import io.swagger.client.model.DefectDetailResponse;
import io.swagger.client.model.DefectLineResponse;
import java.io.File;
import io.swagger.client.model.FileWithDefectsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuditApi {
    private ApiClient apiClient;

    public AuditApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuditApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for generateAuditResultReport
     * @param code Analysis code (optional)
     * @param application Application name (optional)
     * @param changeRequest Change request (optional)
     * @param deliveryLabel Delivery label (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generateAuditResultReportCall(String code, String application, String changeRequest, String deliveryLabel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audits/result/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (code != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("code", code));
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (changeRequest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("changeRequest", changeRequest));
        if (deliveryLabel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deliveryLabel", deliveryLabel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generateAuditResultReportValidateBeforeCall(String code, String application, String changeRequest, String deliveryLabel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = generateAuditResultReportCall(code, application, changeRequest, deliveryLabel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get audit result PDF report
     * Obtains an audit report of the specified delivery in PDF format. It is necessary an analysis code or an application name and change request
     * @param code Analysis code (optional)
     * @param application Application name (optional)
     * @param changeRequest Change request (optional)
     * @param deliveryLabel Delivery label (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File generateAuditResultReport(String code, String application, String changeRequest, String deliveryLabel) throws ApiException {
        ApiResponse<File> resp = generateAuditResultReportWithHttpInfo(code, application, changeRequest, deliveryLabel);
        return resp.getData();
    }

    /**
     * Get audit result PDF report
     * Obtains an audit report of the specified delivery in PDF format. It is necessary an analysis code or an application name and change request
     * @param code Analysis code (optional)
     * @param application Application name (optional)
     * @param changeRequest Change request (optional)
     * @param deliveryLabel Delivery label (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> generateAuditResultReportWithHttpInfo(String code, String application, String changeRequest, String deliveryLabel) throws ApiException {
        com.squareup.okhttp.Call call = generateAuditResultReportValidateBeforeCall(code, application, changeRequest, deliveryLabel, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get audit result PDF report (asynchronously)
     * Obtains an audit report of the specified delivery in PDF format. It is necessary an analysis code or an application name and change request
     * @param code Analysis code (optional)
     * @param application Application name (optional)
     * @param changeRequest Change request (optional)
     * @param deliveryLabel Delivery label (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generateAuditResultReportAsync(String code, String application, String changeRequest, String deliveryLabel, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generateAuditResultReportValidateBeforeCall(code, application, changeRequest, deliveryLabel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuditDefects
     * @param deliveryCode Delivery code (required)
     * @param characteristics Comma-separated list of characteristics to filter by (optional)
     * @param languages Comma-separated list of languages to filter by (optional)
     * @param priorities Comma-separated list of priorities(Very low, Low, Normal, High, Very high) to filter by (optional)
     * @param fileContains Use this param to filter defects by file name (optional)
     * @param orderBy Sorting criteria: priority/effort (optional)
     * @param asc Sort ascending: true/false (optional)
     * @param limit Max number of defects returned (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuditDefectsCall(String deliveryCode, String characteristics, String languages, String priorities, String fileContains, String orderBy, Boolean asc, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auditResult/defects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (deliveryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deliveryCode", deliveryCode));
        if (characteristics != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("characteristics", characteristics));
        if (languages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("languages", languages));
        if (priorities != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("priorities", priorities));
        if (fileContains != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fileContains", fileContains));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (asc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asc", asc));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuditDefectsValidateBeforeCall(String deliveryCode, String characteristics, String languages, String priorities, String fileContains, String orderBy, Boolean asc, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deliveryCode' is set
        if (deliveryCode == null) {
            throw new ApiException("Missing the required parameter 'deliveryCode' when calling getAuditDefects(Async)");
        }
        

        com.squareup.okhttp.Call call = getAuditDefectsCall(deliveryCode, characteristics, languages, priorities, fileContains, orderBy, asc, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get audit result defects
     * Get defects of an audit result
     * @param deliveryCode Delivery code (required)
     * @param characteristics Comma-separated list of characteristics to filter by (optional)
     * @param languages Comma-separated list of languages to filter by (optional)
     * @param priorities Comma-separated list of priorities(Very low, Low, Normal, High, Very high) to filter by (optional)
     * @param fileContains Use this param to filter defects by file name (optional)
     * @param orderBy Sorting criteria: priority/effort (optional)
     * @param asc Sort ascending: true/false (optional)
     * @param limit Max number of defects returned (optional)
     * @return List&lt;DefectDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DefectDetailResponse> getAuditDefects(String deliveryCode, String characteristics, String languages, String priorities, String fileContains, String orderBy, Boolean asc, Integer limit) throws ApiException {
        ApiResponse<List<DefectDetailResponse>> resp = getAuditDefectsWithHttpInfo(deliveryCode, characteristics, languages, priorities, fileContains, orderBy, asc, limit);
        return resp.getData();
    }

    /**
     * Get audit result defects
     * Get defects of an audit result
     * @param deliveryCode Delivery code (required)
     * @param characteristics Comma-separated list of characteristics to filter by (optional)
     * @param languages Comma-separated list of languages to filter by (optional)
     * @param priorities Comma-separated list of priorities(Very low, Low, Normal, High, Very high) to filter by (optional)
     * @param fileContains Use this param to filter defects by file name (optional)
     * @param orderBy Sorting criteria: priority/effort (optional)
     * @param asc Sort ascending: true/false (optional)
     * @param limit Max number of defects returned (optional)
     * @return ApiResponse&lt;List&lt;DefectDetailResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DefectDetailResponse>> getAuditDefectsWithHttpInfo(String deliveryCode, String characteristics, String languages, String priorities, String fileContains, String orderBy, Boolean asc, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getAuditDefectsValidateBeforeCall(deliveryCode, characteristics, languages, priorities, fileContains, orderBy, asc, limit, null, null);
        Type localVarReturnType = new TypeToken<List<DefectDetailResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get audit result defects (asynchronously)
     * Get defects of an audit result
     * @param deliveryCode Delivery code (required)
     * @param characteristics Comma-separated list of characteristics to filter by (optional)
     * @param languages Comma-separated list of languages to filter by (optional)
     * @param priorities Comma-separated list of priorities(Very low, Low, Normal, High, Very high) to filter by (optional)
     * @param fileContains Use this param to filter defects by file name (optional)
     * @param orderBy Sorting criteria: priority/effort (optional)
     * @param asc Sort ascending: true/false (optional)
     * @param limit Max number of defects returned (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuditDefectsAsync(String deliveryCode, String characteristics, String languages, String priorities, String fileContains, String orderBy, Boolean asc, Integer limit, final ApiCallback<List<DefectDetailResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuditDefectsValidateBeforeCall(deliveryCode, characteristics, languages, priorities, fileContains, orderBy, asc, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DefectDetailResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuditResult
     * @param deliveryCode Delivery code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuditResultCall(String deliveryCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auditResult";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (deliveryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deliveryCode", deliveryCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuditResultValidateBeforeCall(String deliveryCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deliveryCode' is set
        if (deliveryCode == null) {
            throw new ApiException("Missing the required parameter 'deliveryCode' when calling getAuditResult(Async)");
        }
        

        com.squareup.okhttp.Call call = getAuditResultCall(deliveryCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get audit result
     * Get an audit result with defects count by priority
     * @param deliveryCode Delivery code (required)
     * @return AuditResultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuditResultResponse getAuditResult(String deliveryCode) throws ApiException {
        ApiResponse<AuditResultResponse> resp = getAuditResultWithHttpInfo(deliveryCode);
        return resp.getData();
    }

    /**
     * Get audit result
     * Get an audit result with defects count by priority
     * @param deliveryCode Delivery code (required)
     * @return ApiResponse&lt;AuditResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuditResultResponse> getAuditResultWithHttpInfo(String deliveryCode) throws ApiException {
        com.squareup.okhttp.Call call = getAuditResultValidateBeforeCall(deliveryCode, null, null);
        Type localVarReturnType = new TypeToken<AuditResultResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get audit result (asynchronously)
     * Get an audit result with defects count by priority
     * @param deliveryCode Delivery code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuditResultAsync(String deliveryCode, final ApiCallback<AuditResultResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuditResultValidateBeforeCall(deliveryCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuditResultResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFilesWithGET
     * @param application Application name (required)
     * @param deliveryCode Delivery code (required)
     * @param ruleCode Rule code (required)
     * @param checkpoint Checkpoint id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFilesWithGETCall(String application, String deliveryCode, String ruleCode, String checkpoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audits/checkpoints/violatedrules/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (deliveryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deliveryCode", deliveryCode));
        if (ruleCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ruleCode", ruleCode));
        if (checkpoint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("checkpoint", checkpoint));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFilesWithGETValidateBeforeCall(String application, String deliveryCode, String ruleCode, String checkpoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling getFilesWithGET(Async)");
        }
        
        // verify the required parameter 'deliveryCode' is set
        if (deliveryCode == null) {
            throw new ApiException("Missing the required parameter 'deliveryCode' when calling getFilesWithGET(Async)");
        }
        
        // verify the required parameter 'ruleCode' is set
        if (ruleCode == null) {
            throw new ApiException("Missing the required parameter 'ruleCode' when calling getFilesWithGET(Async)");
        }
        
        // verify the required parameter 'checkpoint' is set
        if (checkpoint == null) {
            throw new ApiException("Missing the required parameter 'checkpoint' when calling getFilesWithGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getFilesWithGETCall(application, deliveryCode, ruleCode, checkpoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of files
     * List files with a violated rule of an audit
     * @param application Application name (required)
     * @param deliveryCode Delivery code (required)
     * @param ruleCode Rule code (required)
     * @param checkpoint Checkpoint id (required)
     * @return List&lt;FileWithDefectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FileWithDefectsResponse> getFilesWithGET(String application, String deliveryCode, String ruleCode, String checkpoint) throws ApiException {
        ApiResponse<List<FileWithDefectsResponse>> resp = getFilesWithGETWithHttpInfo(application, deliveryCode, ruleCode, checkpoint);
        return resp.getData();
    }

    /**
     * Get list of files
     * List files with a violated rule of an audit
     * @param application Application name (required)
     * @param deliveryCode Delivery code (required)
     * @param ruleCode Rule code (required)
     * @param checkpoint Checkpoint id (required)
     * @return ApiResponse&lt;List&lt;FileWithDefectsResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FileWithDefectsResponse>> getFilesWithGETWithHttpInfo(String application, String deliveryCode, String ruleCode, String checkpoint) throws ApiException {
        com.squareup.okhttp.Call call = getFilesWithGETValidateBeforeCall(application, deliveryCode, ruleCode, checkpoint, null, null);
        Type localVarReturnType = new TypeToken<List<FileWithDefectsResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of files (asynchronously)
     * List files with a violated rule of an audit
     * @param application Application name (required)
     * @param deliveryCode Delivery code (required)
     * @param ruleCode Rule code (required)
     * @param checkpoint Checkpoint id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFilesWithGETAsync(String application, String deliveryCode, String ruleCode, String checkpoint, final ApiCallback<List<FileWithDefectsResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFilesWithGETValidateBeforeCall(application, deliveryCode, ruleCode, checkpoint, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FileWithDefectsResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLinesWithGET
     * @param application Application name (required)
     * @param deliveryCode Delivery code (required)
     * @param ruleCode Rule code (required)
     * @param file File name (required)
     * @param checkpoint Checkpoint id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLinesWithGETCall(String application, String deliveryCode, String ruleCode, String file, String checkpoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audits/checkpoints/violatedrules/files/defects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (deliveryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deliveryCode", deliveryCode));
        if (ruleCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ruleCode", ruleCode));
        if (file != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file", file));
        if (checkpoint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("checkpoint", checkpoint));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLinesWithGETValidateBeforeCall(String application, String deliveryCode, String ruleCode, String file, String checkpoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling getLinesWithGET(Async)");
        }
        
        // verify the required parameter 'deliveryCode' is set
        if (deliveryCode == null) {
            throw new ApiException("Missing the required parameter 'deliveryCode' when calling getLinesWithGET(Async)");
        }
        
        // verify the required parameter 'ruleCode' is set
        if (ruleCode == null) {
            throw new ApiException("Missing the required parameter 'ruleCode' when calling getLinesWithGET(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling getLinesWithGET(Async)");
        }
        
        // verify the required parameter 'checkpoint' is set
        if (checkpoint == null) {
            throw new ApiException("Missing the required parameter 'checkpoint' when calling getLinesWithGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getLinesWithGETCall(application, deliveryCode, ruleCode, file, checkpoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of defects of file
     * List defects in a file
     * @param application Application name (required)
     * @param deliveryCode Delivery code (required)
     * @param ruleCode Rule code (required)
     * @param file File name (required)
     * @param checkpoint Checkpoint id (required)
     * @return List&lt;DefectLineResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DefectLineResponse> getLinesWithGET(String application, String deliveryCode, String ruleCode, String file, String checkpoint) throws ApiException {
        ApiResponse<List<DefectLineResponse>> resp = getLinesWithGETWithHttpInfo(application, deliveryCode, ruleCode, file, checkpoint);
        return resp.getData();
    }

    /**
     * Get list of defects of file
     * List defects in a file
     * @param application Application name (required)
     * @param deliveryCode Delivery code (required)
     * @param ruleCode Rule code (required)
     * @param file File name (required)
     * @param checkpoint Checkpoint id (required)
     * @return ApiResponse&lt;List&lt;DefectLineResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DefectLineResponse>> getLinesWithGETWithHttpInfo(String application, String deliveryCode, String ruleCode, String file, String checkpoint) throws ApiException {
        com.squareup.okhttp.Call call = getLinesWithGETValidateBeforeCall(application, deliveryCode, ruleCode, file, checkpoint, null, null);
        Type localVarReturnType = new TypeToken<List<DefectLineResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of defects of file (asynchronously)
     * List defects in a file
     * @param application Application name (required)
     * @param deliveryCode Delivery code (required)
     * @param ruleCode Rule code (required)
     * @param file File name (required)
     * @param checkpoint Checkpoint id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLinesWithGETAsync(String application, String deliveryCode, String ruleCode, String file, String checkpoint, final ApiCallback<List<DefectLineResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLinesWithGETValidateBeforeCall(application, deliveryCode, ruleCode, file, checkpoint, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DefectLineResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
