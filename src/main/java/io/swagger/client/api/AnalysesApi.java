/*
 * Kiuwan REST API
 * Kiuwan REST API specification
 *
 * OpenAPI spec version: 2.8.2004.3-SNAPSHOT
 * Contact: support@kiuwan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AnalysisDefectsResponse;
import io.swagger.client.model.AnalysisFilesResponse;
import io.swagger.client.model.AnalysisResponse;
import io.swagger.client.model.AnalysisResultResponse;
import io.swagger.client.model.ApplicationAnalysisResponse;
import io.swagger.client.model.DefectsDeltaDetailResponse;
import io.swagger.client.model.DefectsDeltaResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalysesApi {
    private ApiClient apiClient;

    public AnalysesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalysesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteAnalysis
     * @param analysisCode Analysis code to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAnalysisCall(String analysisCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (analysisCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("analysisCode", analysisCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAnalysisValidateBeforeCall(String analysisCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'analysisCode' is set
        if (analysisCode == null) {
            throw new ApiException("Missing the required parameter 'analysisCode' when calling deleteAnalysis(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAnalysisCall(analysisCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete analysis
     * Delete the specified analysis. The analysis code parameter can refernce a baseline or a delivery. Runnning or enqueued analyses can be also deleted. Note that when a baseline analysis is specified, all its related deliveries will be deleted as well. This endpoint returns the deleted analyses&#39; codes.
     * @param analysisCode Analysis code to delete (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> deleteAnalysis(String analysisCode) throws ApiException {
        ApiResponse<List<String>> resp = deleteAnalysisWithHttpInfo(analysisCode);
        return resp.getData();
    }

    /**
     * Delete analysis
     * Delete the specified analysis. The analysis code parameter can refernce a baseline or a delivery. Runnning or enqueued analyses can be also deleted. Note that when a baseline analysis is specified, all its related deliveries will be deleted as well. This endpoint returns the deleted analyses&#39; codes.
     * @param analysisCode Analysis code to delete (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> deleteAnalysisWithHttpInfo(String analysisCode) throws ApiException {
        com.squareup.okhttp.Call call = deleteAnalysisValidateBeforeCall(analysisCode, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete analysis (asynchronously)
     * Delete the specified analysis. The analysis code parameter can refernce a baseline or a delivery. Runnning or enqueued analyses can be also deleted. Note that when a baseline analysis is specified, all its related deliveries will be deleted as well. This endpoint returns the deleted analyses&#39; codes.
     * @param analysisCode Analysis code to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAnalysisAsync(String analysisCode, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAnalysisValidateBeforeCall(analysisCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAnalysis
     * @param code Analysis code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAnalysisCall(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/analysis/{code}"
            .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAnalysisValidateBeforeCall(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getAnalysis(Async)");
        }
        

        com.squareup.okhttp.Call call = getAnalysisCall(code, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get application analysis
     * Retrieves analysis results for a concrete analysis specified by code parameter.
     * @param code Analysis code (required)
     * @return AnalysisResultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnalysisResultResponse getAnalysis(String code) throws ApiException {
        ApiResponse<AnalysisResultResponse> resp = getAnalysisWithHttpInfo(code);
        return resp.getData();
    }

    /**
     * Get application analysis
     * Retrieves analysis results for a concrete analysis specified by code parameter.
     * @param code Analysis code (required)
     * @return ApiResponse&lt;AnalysisResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnalysisResultResponse> getAnalysisWithHttpInfo(String code) throws ApiException {
        com.squareup.okhttp.Call call = getAnalysisValidateBeforeCall(code, null, null);
        Type localVarReturnType = new TypeToken<AnalysisResultResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get application analysis (asynchronously)
     * Retrieves analysis results for a concrete analysis specified by code parameter.
     * @param code Analysis code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAnalysisAsync(String code, final ApiCallback<AnalysisResultResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAnalysisValidateBeforeCall(code, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnalysisResultResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAnalysisDefects
     * @param code Analysis code (required)
     * @param characteristics Comma-separated list of characteristics to filter by (optional)
     * @param languages Comma-separated list of languages to filter by (optional)
     * @param priorities Comma-separated list of priorities(Very low, Low, Normal, High, Very high) to filter by (optional)
     * @param fileContains Use this param to filter defects by file name (optional)
     * @param orderBy Sorting criteria (one of &#39;priority&#39; or &#39;effort&#39;) (optional)
     * @param asc Set to true to sort ascending (default is not set), false for descending (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many defects in each page (defaults to 500) (optional, default to 500)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAnalysisDefectsCall(String code, String characteristics, String languages, String priorities, String fileContains, String orderBy, Boolean asc, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/analysis/{code}/defects"
            .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (characteristics != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("characteristics", characteristics));
        if (languages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("languages", languages));
        if (priorities != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("priorities", priorities));
        if (fileContains != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fileContains", fileContains));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (asc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asc", asc));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAnalysisDefectsValidateBeforeCall(String code, String characteristics, String languages, String priorities, String fileContains, String orderBy, Boolean asc, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getAnalysisDefects(Async)");
        }
        

        com.squareup.okhttp.Call call = getAnalysisDefectsCall(code, characteristics, languages, priorities, fileContains, orderBy, asc, page, count, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of analysis defects
     * List analysis defects for a concrete analysis specified by analysisCode parameter.
     * @param code Analysis code (required)
     * @param characteristics Comma-separated list of characteristics to filter by (optional)
     * @param languages Comma-separated list of languages to filter by (optional)
     * @param priorities Comma-separated list of priorities(Very low, Low, Normal, High, Very high) to filter by (optional)
     * @param fileContains Use this param to filter defects by file name (optional)
     * @param orderBy Sorting criteria (one of &#39;priority&#39; or &#39;effort&#39;) (optional)
     * @param asc Set to true to sort ascending (default is not set), false for descending (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many defects in each page (defaults to 500) (optional, default to 500)
     * @return AnalysisDefectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnalysisDefectsResponse getAnalysisDefects(String code, String characteristics, String languages, String priorities, String fileContains, String orderBy, Boolean asc, Integer page, Integer count) throws ApiException {
        ApiResponse<AnalysisDefectsResponse> resp = getAnalysisDefectsWithHttpInfo(code, characteristics, languages, priorities, fileContains, orderBy, asc, page, count);
        return resp.getData();
    }

    /**
     * Get list of analysis defects
     * List analysis defects for a concrete analysis specified by analysisCode parameter.
     * @param code Analysis code (required)
     * @param characteristics Comma-separated list of characteristics to filter by (optional)
     * @param languages Comma-separated list of languages to filter by (optional)
     * @param priorities Comma-separated list of priorities(Very low, Low, Normal, High, Very high) to filter by (optional)
     * @param fileContains Use this param to filter defects by file name (optional)
     * @param orderBy Sorting criteria (one of &#39;priority&#39; or &#39;effort&#39;) (optional)
     * @param asc Set to true to sort ascending (default is not set), false for descending (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many defects in each page (defaults to 500) (optional, default to 500)
     * @return ApiResponse&lt;AnalysisDefectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnalysisDefectsResponse> getAnalysisDefectsWithHttpInfo(String code, String characteristics, String languages, String priorities, String fileContains, String orderBy, Boolean asc, Integer page, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = getAnalysisDefectsValidateBeforeCall(code, characteristics, languages, priorities, fileContains, orderBy, asc, page, count, null, null);
        Type localVarReturnType = new TypeToken<AnalysisDefectsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of analysis defects (asynchronously)
     * List analysis defects for a concrete analysis specified by analysisCode parameter.
     * @param code Analysis code (required)
     * @param characteristics Comma-separated list of characteristics to filter by (optional)
     * @param languages Comma-separated list of languages to filter by (optional)
     * @param priorities Comma-separated list of priorities(Very low, Low, Normal, High, Very high) to filter by (optional)
     * @param fileContains Use this param to filter defects by file name (optional)
     * @param orderBy Sorting criteria (one of &#39;priority&#39; or &#39;effort&#39;) (optional)
     * @param asc Set to true to sort ascending (default is not set), false for descending (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many defects in each page (defaults to 500) (optional, default to 500)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAnalysisDefectsAsync(String code, String characteristics, String languages, String priorities, String fileContains, String orderBy, Boolean asc, Integer page, Integer count, final ApiCallback<AnalysisDefectsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAnalysisDefectsValidateBeforeCall(code, characteristics, languages, priorities, fileContains, orderBy, asc, page, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnalysisDefectsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAnalysisDefectsDelta
     * @param code Analysis code (required)
     * @param previouscode Previous analysis code (required)
     * @param defectstype Either &#39;new&#39; or &#39;removed&#39; (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAnalysisDefectsDeltaCall(String code, String previouscode, String defectstype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/analysis/{code}/defects/compare/{previouscode}/{defectstype}"
            .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()))
            .replaceAll("\\{" + "previouscode" + "\\}", apiClient.escapeString(previouscode.toString()))
            .replaceAll("\\{" + "defectstype" + "\\}", apiClient.escapeString(defectstype.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAnalysisDefectsDeltaValidateBeforeCall(String code, String previouscode, String defectstype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getAnalysisDefectsDelta(Async)");
        }
        
        // verify the required parameter 'previouscode' is set
        if (previouscode == null) {
            throw new ApiException("Missing the required parameter 'previouscode' when calling getAnalysisDefectsDelta(Async)");
        }
        
        // verify the required parameter 'defectstype' is set
        if (defectstype == null) {
            throw new ApiException("Missing the required parameter 'defectstype' when calling getAnalysisDefectsDelta(Async)");
        }
        

        com.squareup.okhttp.Call call = getAnalysisDefectsDeltaCall(code, previouscode, defectstype, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the list of new/removed defects in a comparison
     * Get the list of new/removed defects in an analysis from the previous analysis.
     * @param code Analysis code (required)
     * @param previouscode Previous analysis code (required)
     * @param defectstype Either &#39;new&#39; or &#39;removed&#39; (required)
     * @return DefectsDeltaDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DefectsDeltaDetailResponse getAnalysisDefectsDelta(String code, String previouscode, String defectstype) throws ApiException {
        ApiResponse<DefectsDeltaDetailResponse> resp = getAnalysisDefectsDeltaWithHttpInfo(code, previouscode, defectstype);
        return resp.getData();
    }

    /**
     * Get the list of new/removed defects in a comparison
     * Get the list of new/removed defects in an analysis from the previous analysis.
     * @param code Analysis code (required)
     * @param previouscode Previous analysis code (required)
     * @param defectstype Either &#39;new&#39; or &#39;removed&#39; (required)
     * @return ApiResponse&lt;DefectsDeltaDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DefectsDeltaDetailResponse> getAnalysisDefectsDeltaWithHttpInfo(String code, String previouscode, String defectstype) throws ApiException {
        com.squareup.okhttp.Call call = getAnalysisDefectsDeltaValidateBeforeCall(code, previouscode, defectstype, null, null);
        Type localVarReturnType = new TypeToken<DefectsDeltaDetailResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of new/removed defects in a comparison (asynchronously)
     * Get the list of new/removed defects in an analysis from the previous analysis.
     * @param code Analysis code (required)
     * @param previouscode Previous analysis code (required)
     * @param defectstype Either &#39;new&#39; or &#39;removed&#39; (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAnalysisDefectsDeltaAsync(String code, String previouscode, String defectstype, final ApiCallback<DefectsDeltaDetailResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAnalysisDefectsDeltaValidateBeforeCall(code, previouscode, defectstype, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DefectsDeltaDetailResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAnalysisDelta
     * @param code Analysis code (required)
     * @param previouscode Previous analysis code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAnalysisDeltaCall(String code, String previouscode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/analysis/{code}/defects/compare/{previouscode}"
            .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()))
            .replaceAll("\\{" + "previouscode" + "\\}", apiClient.escapeString(previouscode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAnalysisDeltaValidateBeforeCall(String code, String previouscode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getAnalysisDelta(Async)");
        }
        
        // verify the required parameter 'previouscode' is set
        if (previouscode == null) {
            throw new ApiException("Missing the required parameter 'previouscode' when calling getAnalysisDelta(Async)");
        }
        

        com.squareup.okhttp.Call call = getAnalysisDeltaCall(code, previouscode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get comparison of the defects found in two different analysis
     * Get the net number of new and removed defects and violated rules after comparing 2 given analyses.
     * @param code Analysis code (required)
     * @param previouscode Previous analysis code (required)
     * @return DefectsDeltaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DefectsDeltaResponse getAnalysisDelta(String code, String previouscode) throws ApiException {
        ApiResponse<DefectsDeltaResponse> resp = getAnalysisDeltaWithHttpInfo(code, previouscode);
        return resp.getData();
    }

    /**
     * Get comparison of the defects found in two different analysis
     * Get the net number of new and removed defects and violated rules after comparing 2 given analyses.
     * @param code Analysis code (required)
     * @param previouscode Previous analysis code (required)
     * @return ApiResponse&lt;DefectsDeltaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DefectsDeltaResponse> getAnalysisDeltaWithHttpInfo(String code, String previouscode) throws ApiException {
        com.squareup.okhttp.Call call = getAnalysisDeltaValidateBeforeCall(code, previouscode, null, null);
        Type localVarReturnType = new TypeToken<DefectsDeltaResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get comparison of the defects found in two different analysis (asynchronously)
     * Get the net number of new and removed defects and violated rules after comparing 2 given analyses.
     * @param code Analysis code (required)
     * @param previouscode Previous analysis code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAnalysisDeltaAsync(String code, String previouscode, final ApiCallback<DefectsDeltaResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAnalysisDeltaValidateBeforeCall(code, previouscode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DefectsDeltaResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAnalysisFiles
     * @param code Analysis code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAnalysisFilesCall(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/analysis/{code}/files"
            .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAnalysisFilesValidateBeforeCall(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getAnalysisFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getAnalysisFilesCall(code, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of files with metric values and defects for a specific analysis
     * List files with metric values and defects for a specific analysis.
     * @param code Analysis code (required)
     * @return AnalysisFilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnalysisFilesResponse getAnalysisFiles(String code) throws ApiException {
        ApiResponse<AnalysisFilesResponse> resp = getAnalysisFilesWithHttpInfo(code);
        return resp.getData();
    }

    /**
     * Get list of files with metric values and defects for a specific analysis
     * List files with metric values and defects for a specific analysis.
     * @param code Analysis code (required)
     * @return ApiResponse&lt;AnalysisFilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnalysisFilesResponse> getAnalysisFilesWithHttpInfo(String code) throws ApiException {
        com.squareup.okhttp.Call call = getAnalysisFilesValidateBeforeCall(code, null, null);
        Type localVarReturnType = new TypeToken<AnalysisFilesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of files with metric values and defects for a specific analysis (asynchronously)
     * List files with metric values and defects for a specific analysis.
     * @param code Analysis code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAnalysisFilesAsync(String code, final ApiCallback<AnalysisFilesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAnalysisFilesValidateBeforeCall(code, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnalysisFilesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFiles
     * @param application Application name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFilesCall(String application, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFilesValidateBeforeCall(String application, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling getFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getFilesCall(application, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of files with metric values and defects of the latest analysis
     * List files with metric values and defects of the latest analysis for the named application.
     * @param application Application name (required)
     * @return AnalysisFilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnalysisFilesResponse getFiles(String application) throws ApiException {
        ApiResponse<AnalysisFilesResponse> resp = getFilesWithHttpInfo(application);
        return resp.getData();
    }

    /**
     * Get list of files with metric values and defects of the latest analysis
     * List files with metric values and defects of the latest analysis for the named application.
     * @param application Application name (required)
     * @return ApiResponse&lt;AnalysisFilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnalysisFilesResponse> getFilesWithHttpInfo(String application) throws ApiException {
        com.squareup.okhttp.Call call = getFilesValidateBeforeCall(application, null, null);
        Type localVarReturnType = new TypeToken<AnalysisFilesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of files with metric values and defects of the latest analysis (asynchronously)
     * List files with metric values and defects of the latest analysis for the named application.
     * @param application Application name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFilesAsync(String application, final ApiCallback<AnalysisFilesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFilesValidateBeforeCall(application, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnalysisFilesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLastAnalysis
     * @param application Application name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLastAnalysisCall(String application, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/last_analysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLastAnalysisValidateBeforeCall(String application, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling getLastAnalysis(Async)");
        }
        

        com.squareup.okhttp.Call call = getLastAnalysisCall(application, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get last analysis
     * Retrieves last analysis for the authenticated user and the application indicated.
     * @param application Application name (required)
     * @return ApplicationAnalysisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApplicationAnalysisResponse getLastAnalysis(String application) throws ApiException {
        ApiResponse<ApplicationAnalysisResponse> resp = getLastAnalysisWithHttpInfo(application);
        return resp.getData();
    }

    /**
     * Get last analysis
     * Retrieves last analysis for the authenticated user and the application indicated.
     * @param application Application name (required)
     * @return ApiResponse&lt;ApplicationAnalysisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApplicationAnalysisResponse> getLastAnalysisWithHttpInfo(String application) throws ApiException {
        com.squareup.okhttp.Call call = getLastAnalysisValidateBeforeCall(application, null, null);
        Type localVarReturnType = new TypeToken<ApplicationAnalysisResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get last analysis (asynchronously)
     * Retrieves last analysis for the authenticated user and the application indicated.
     * @param application Application name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLastAnalysisAsync(String application, final ApiCallback<ApplicationAnalysisResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLastAnalysisValidateBeforeCall(application, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApplicationAnalysisResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAnalyses
     * @param application Application name (required)
     * @param success Set to true or false to retrieve only succeeded or failed, respectively (optional)
     * @param filterPurgedAnalyses Set to true to not retrieve purged analyses (optional, default to true)
     * @param count Limit results (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAnalysesCall(String application, Boolean success, Boolean filterPurgedAnalyses, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/analyses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (success != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("success", success));
        if (filterPurgedAnalyses != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filterPurgedAnalyses", filterPurgedAnalyses));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAnalysesValidateBeforeCall(String application, Boolean success, Boolean filterPurgedAnalyses, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling listAnalyses(Async)");
        }
        

        com.squareup.okhttp.Call call = listAnalysesCall(application, success, filterPurgedAnalyses, count, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of all analysis codes for an application
     * List all analysis codes for an application.
     * @param application Application name (required)
     * @param success Set to true or false to retrieve only succeeded or failed, respectively (optional)
     * @param filterPurgedAnalyses Set to true to not retrieve purged analyses (optional, default to true)
     * @param count Limit results (optional)
     * @return List&lt;AnalysisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AnalysisResponse> listAnalyses(String application, Boolean success, Boolean filterPurgedAnalyses, Integer count) throws ApiException {
        ApiResponse<List<AnalysisResponse>> resp = listAnalysesWithHttpInfo(application, success, filterPurgedAnalyses, count);
        return resp.getData();
    }

    /**
     * Get list of all analysis codes for an application
     * List all analysis codes for an application.
     * @param application Application name (required)
     * @param success Set to true or false to retrieve only succeeded or failed, respectively (optional)
     * @param filterPurgedAnalyses Set to true to not retrieve purged analyses (optional, default to true)
     * @param count Limit results (optional)
     * @return ApiResponse&lt;List&lt;AnalysisResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AnalysisResponse>> listAnalysesWithHttpInfo(String application, Boolean success, Boolean filterPurgedAnalyses, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = listAnalysesValidateBeforeCall(application, success, filterPurgedAnalyses, count, null, null);
        Type localVarReturnType = new TypeToken<List<AnalysisResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of all analysis codes for an application (asynchronously)
     * List all analysis codes for an application.
     * @param application Application name (required)
     * @param success Set to true or false to retrieve only succeeded or failed, respectively (optional)
     * @param filterPurgedAnalyses Set to true to not retrieve purged analyses (optional, default to true)
     * @param count Limit results (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAnalysesAsync(String application, Boolean success, Boolean filterPurgedAnalyses, Integer count, final ApiCallback<List<AnalysisResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAnalysesValidateBeforeCall(application, success, filterPurgedAnalyses, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AnalysisResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAnalysis
     * @param applicationName Application name to filter results (optional)
     * @param initDate Initial date to start search (optional)
     * @param endDate End date to search (optional)
     * @param status Status to filter analysis (optional)
     * @param auditStatus Audit status to filter analysis (only apply to analysis that has audits) (optional)
     * @param deliveries If the list of analysis must include only deliveries (true) or ignore deliveries (false), if this parameter has not value then all analysis will be returned (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many analysis in each page (defaults to 500) (optional, default to 500)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAnalysisCall(String applicationName, String initDate, String endDate, String status, String auditStatus, Boolean deliveries, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analysis/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (applicationName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("applicationName", applicationName));
        if (initDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("initDate", initDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (auditStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auditStatus", auditStatus));
        if (deliveries != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deliveries", deliveries));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAnalysisValidateBeforeCall(String applicationName, String initDate, String endDate, String status, String auditStatus, Boolean deliveries, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listAnalysisCall(applicationName, initDate, endDate, status, auditStatus, deliveries, page, count, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of analysis
     * List analysis with different parameters to filter data. See parameters section.
     * @param applicationName Application name to filter results (optional)
     * @param initDate Initial date to start search (optional)
     * @param endDate End date to search (optional)
     * @param status Status to filter analysis (optional)
     * @param auditStatus Audit status to filter analysis (only apply to analysis that has audits) (optional)
     * @param deliveries If the list of analysis must include only deliveries (true) or ignore deliveries (false), if this parameter has not value then all analysis will be returned (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many analysis in each page (defaults to 500) (optional, default to 500)
     * @return List&lt;AnalysisResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AnalysisResultResponse> listAnalysis(String applicationName, String initDate, String endDate, String status, String auditStatus, Boolean deliveries, Integer page, Integer count) throws ApiException {
        ApiResponse<List<AnalysisResultResponse>> resp = listAnalysisWithHttpInfo(applicationName, initDate, endDate, status, auditStatus, deliveries, page, count);
        return resp.getData();
    }

    /**
     * Get list of analysis
     * List analysis with different parameters to filter data. See parameters section.
     * @param applicationName Application name to filter results (optional)
     * @param initDate Initial date to start search (optional)
     * @param endDate End date to search (optional)
     * @param status Status to filter analysis (optional)
     * @param auditStatus Audit status to filter analysis (only apply to analysis that has audits) (optional)
     * @param deliveries If the list of analysis must include only deliveries (true) or ignore deliveries (false), if this parameter has not value then all analysis will be returned (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many analysis in each page (defaults to 500) (optional, default to 500)
     * @return ApiResponse&lt;List&lt;AnalysisResultResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AnalysisResultResponse>> listAnalysisWithHttpInfo(String applicationName, String initDate, String endDate, String status, String auditStatus, Boolean deliveries, Integer page, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = listAnalysisValidateBeforeCall(applicationName, initDate, endDate, status, auditStatus, deliveries, page, count, null, null);
        Type localVarReturnType = new TypeToken<List<AnalysisResultResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of analysis (asynchronously)
     * List analysis with different parameters to filter data. See parameters section.
     * @param applicationName Application name to filter results (optional)
     * @param initDate Initial date to start search (optional)
     * @param endDate End date to search (optional)
     * @param status Status to filter analysis (optional)
     * @param auditStatus Audit status to filter analysis (only apply to analysis that has audits) (optional)
     * @param deliveries If the list of analysis must include only deliveries (true) or ignore deliveries (false), if this parameter has not value then all analysis will be returned (optional)
     * @param page Number of results page (defaults to 1) (optional, default to 1)
     * @param count How many analysis in each page (defaults to 500) (optional, default to 500)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAnalysisAsync(String applicationName, String initDate, String endDate, String status, String auditStatus, Boolean deliveries, Integer page, Integer count, final ApiCallback<List<AnalysisResultResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAnalysisValidateBeforeCall(applicationName, initDate, endDate, status, auditStatus, deliveries, page, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AnalysisResultResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
