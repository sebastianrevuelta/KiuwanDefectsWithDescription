/*
 * Kiuwan REST API
 * Kiuwan REST API specification
 *
 * OpenAPI spec version: 2.8.2004.3-SNAPSHOT
 * Contact: support@kiuwan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApplicationRoleData;
import io.swagger.client.model.PortfolioRoleData;
import io.swagger.client.model.UserAppsPermissionsResponse;
import io.swagger.client.model.UserDetailResponse;
import io.swagger.client.model.UserManagementRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient apiClient;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createUser
     * @param body the user to create (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserCall(UserManagementRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserValidateBeforeCall(UserManagementRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createUser(Async)");
        }
        

        com.squareup.okhttp.Call call = createUserCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create user
     * Creates a new user in your account.
     * @param body the user to create (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createUser(UserManagementRequest body) throws ApiException {
        createUserWithHttpInfo(body);
    }

    /**
     * Create user
     * Creates a new user in your account.
     * @param body the user to create (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createUserWithHttpInfo(UserManagementRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createUserValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create user (asynchronously)
     * Creates a new user in your account.
     * @param body the user to create (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserAsync(UserManagementRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteUser
     * @param username User name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserValidateBeforeCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling deleteUser(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteUserCall(username, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete user
     * Delete a user of your account.
     * @param username User name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteUser(String username) throws ApiException {
        deleteUserWithHttpInfo(username);
    }

    /**
     * Delete user
     * Delete a user of your account.
     * @param username User name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteUserWithHttpInfo(String username) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserValidateBeforeCall(username, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete user (asynchronously)
     * Delete a user of your account.
     * @param username User name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserAsync(String username, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserValidateBeforeCall(username, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getUserApplicationsRoles
     * @param username User name (required)
     * @param applicationName &#39;applicationName&#39; mask to filter results (optional)
     * @param exactApplicationName Indicates if the applicationName must be equals (ignore case). Only apply if applicationName is provided (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserApplicationsRolesCall(String username, String applicationName, Boolean exactApplicationName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{username}/applications/roles"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (applicationName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("applicationName", applicationName));
        if (exactApplicationName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exactApplicationName", exactApplicationName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserApplicationsRolesValidateBeforeCall(String username, String applicationName, Boolean exactApplicationName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUserApplicationsRoles(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserApplicationsRolesCall(username, applicationName, exactApplicationName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get applications roles by user
     * List the applications roles for the username. Use &#39;applicationName&#39; and &#39;exactApplicationName&#39; to filter results.
     * @param username User name (required)
     * @param applicationName &#39;applicationName&#39; mask to filter results (optional)
     * @param exactApplicationName Indicates if the applicationName must be equals (ignore case). Only apply if applicationName is provided (optional)
     * @return List&lt;ApplicationRoleData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ApplicationRoleData> getUserApplicationsRoles(String username, String applicationName, Boolean exactApplicationName) throws ApiException {
        ApiResponse<List<ApplicationRoleData>> resp = getUserApplicationsRolesWithHttpInfo(username, applicationName, exactApplicationName);
        return resp.getData();
    }

    /**
     * Get applications roles by user
     * List the applications roles for the username. Use &#39;applicationName&#39; and &#39;exactApplicationName&#39; to filter results.
     * @param username User name (required)
     * @param applicationName &#39;applicationName&#39; mask to filter results (optional)
     * @param exactApplicationName Indicates if the applicationName must be equals (ignore case). Only apply if applicationName is provided (optional)
     * @return ApiResponse&lt;List&lt;ApplicationRoleData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ApplicationRoleData>> getUserApplicationsRolesWithHttpInfo(String username, String applicationName, Boolean exactApplicationName) throws ApiException {
        com.squareup.okhttp.Call call = getUserApplicationsRolesValidateBeforeCall(username, applicationName, exactApplicationName, null, null);
        Type localVarReturnType = new TypeToken<List<ApplicationRoleData>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get applications roles by user (asynchronously)
     * List the applications roles for the username. Use &#39;applicationName&#39; and &#39;exactApplicationName&#39; to filter results.
     * @param username User name (required)
     * @param applicationName &#39;applicationName&#39; mask to filter results (optional)
     * @param exactApplicationName Indicates if the applicationName must be equals (ignore case). Only apply if applicationName is provided (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserApplicationsRolesAsync(String username, String applicationName, Boolean exactApplicationName, final ApiCallback<List<ApplicationRoleData>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserApplicationsRolesValidateBeforeCall(username, applicationName, exactApplicationName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ApplicationRoleData>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserPortfoliosRoles
     * @param username User name (required)
     * @param portfolioName &#39;portfolioName&#39; mask to filter results (optional)
     * @param exactPortfolioName Indicates if the portfolioName must be equals (ignore case). Only apply if portfolioName is provided (optional)
     * @param portfolioValue &#39;portfolioValue&#39; mask to filter results (optional)
     * @param exactPortfolioValue Indicates if the portfolioValue must be equals (ignore case). Only apply if portfolioValue is provided (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserPortfoliosRolesCall(String username, String portfolioName, Boolean exactPortfolioName, String portfolioValue, Boolean exactPortfolioValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{username}/portfolios/roles"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioName", portfolioName));
        if (exactPortfolioName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exactPortfolioName", exactPortfolioName));
        if (portfolioValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioValue", portfolioValue));
        if (exactPortfolioValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exactPortfolioValue", exactPortfolioValue));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserPortfoliosRolesValidateBeforeCall(String username, String portfolioName, Boolean exactPortfolioName, String portfolioValue, Boolean exactPortfolioValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUserPortfoliosRoles(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserPortfoliosRolesCall(username, portfolioName, exactPortfolioName, portfolioValue, exactPortfolioValue, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get portfolios roles by user
     * List the portfolios roles for the username. Use &#39;portfolioName&#39;, &#39;exactPortfolioName&#39;, &#39;portfolioValue&#39; and &#39;exactPortfolioValue&#39; to filter results.
     * @param username User name (required)
     * @param portfolioName &#39;portfolioName&#39; mask to filter results (optional)
     * @param exactPortfolioName Indicates if the portfolioName must be equals (ignore case). Only apply if portfolioName is provided (optional)
     * @param portfolioValue &#39;portfolioValue&#39; mask to filter results (optional)
     * @param exactPortfolioValue Indicates if the portfolioValue must be equals (ignore case). Only apply if portfolioValue is provided (optional)
     * @return List&lt;PortfolioRoleData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PortfolioRoleData> getUserPortfoliosRoles(String username, String portfolioName, Boolean exactPortfolioName, String portfolioValue, Boolean exactPortfolioValue) throws ApiException {
        ApiResponse<List<PortfolioRoleData>> resp = getUserPortfoliosRolesWithHttpInfo(username, portfolioName, exactPortfolioName, portfolioValue, exactPortfolioValue);
        return resp.getData();
    }

    /**
     * Get portfolios roles by user
     * List the portfolios roles for the username. Use &#39;portfolioName&#39;, &#39;exactPortfolioName&#39;, &#39;portfolioValue&#39; and &#39;exactPortfolioValue&#39; to filter results.
     * @param username User name (required)
     * @param portfolioName &#39;portfolioName&#39; mask to filter results (optional)
     * @param exactPortfolioName Indicates if the portfolioName must be equals (ignore case). Only apply if portfolioName is provided (optional)
     * @param portfolioValue &#39;portfolioValue&#39; mask to filter results (optional)
     * @param exactPortfolioValue Indicates if the portfolioValue must be equals (ignore case). Only apply if portfolioValue is provided (optional)
     * @return ApiResponse&lt;List&lt;PortfolioRoleData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PortfolioRoleData>> getUserPortfoliosRolesWithHttpInfo(String username, String portfolioName, Boolean exactPortfolioName, String portfolioValue, Boolean exactPortfolioValue) throws ApiException {
        com.squareup.okhttp.Call call = getUserPortfoliosRolesValidateBeforeCall(username, portfolioName, exactPortfolioName, portfolioValue, exactPortfolioValue, null, null);
        Type localVarReturnType = new TypeToken<List<PortfolioRoleData>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get portfolios roles by user (asynchronously)
     * List the portfolios roles for the username. Use &#39;portfolioName&#39;, &#39;exactPortfolioName&#39;, &#39;portfolioValue&#39; and &#39;exactPortfolioValue&#39; to filter results.
     * @param username User name (required)
     * @param portfolioName &#39;portfolioName&#39; mask to filter results (optional)
     * @param exactPortfolioName Indicates if the portfolioName must be equals (ignore case). Only apply if portfolioName is provided (optional)
     * @param portfolioValue &#39;portfolioValue&#39; mask to filter results (optional)
     * @param exactPortfolioValue Indicates if the portfolioValue must be equals (ignore case). Only apply if portfolioValue is provided (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserPortfoliosRolesAsync(String username, String portfolioName, Boolean exactPortfolioName, String portfolioValue, Boolean exactPortfolioValue, final ApiCallback<List<PortfolioRoleData>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserPortfoliosRolesValidateBeforeCall(username, portfolioName, exactPortfolioName, portfolioValue, exactPortfolioValue, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PortfolioRoleData>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listUsers
     * @param username &#39;username&#39; mask to filter results (optional)
     * @param exactUsername Indicates if the username must be equals (ignore case). Only apply if username is provided (optional)
     * @param emailAddress &#39;emailAddress&#39; mask to filter results (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listUsersCall(String username, Boolean exactUsername, String emailAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (exactUsername != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exactUsername", exactUsername));
        if (emailAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("emailAddress", emailAddress));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listUsersValidateBeforeCall(String username, Boolean exactUsername, String emailAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listUsersCall(username, exactUsername, emailAddress, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of users
     * List the users of your account. Use &#39;username&#39; and &#39;emailAddress&#39; (logical AND) to filter results.
     * @param username &#39;username&#39; mask to filter results (optional)
     * @param exactUsername Indicates if the username must be equals (ignore case). Only apply if username is provided (optional)
     * @param emailAddress &#39;emailAddress&#39; mask to filter results (optional)
     * @return List&lt;UserDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserDetailResponse> listUsers(String username, Boolean exactUsername, String emailAddress) throws ApiException {
        ApiResponse<List<UserDetailResponse>> resp = listUsersWithHttpInfo(username, exactUsername, emailAddress);
        return resp.getData();
    }

    /**
     * Get list of users
     * List the users of your account. Use &#39;username&#39; and &#39;emailAddress&#39; (logical AND) to filter results.
     * @param username &#39;username&#39; mask to filter results (optional)
     * @param exactUsername Indicates if the username must be equals (ignore case). Only apply if username is provided (optional)
     * @param emailAddress &#39;emailAddress&#39; mask to filter results (optional)
     * @return ApiResponse&lt;List&lt;UserDetailResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserDetailResponse>> listUsersWithHttpInfo(String username, Boolean exactUsername, String emailAddress) throws ApiException {
        com.squareup.okhttp.Call call = listUsersValidateBeforeCall(username, exactUsername, emailAddress, null, null);
        Type localVarReturnType = new TypeToken<List<UserDetailResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of users (asynchronously)
     * List the users of your account. Use &#39;username&#39; and &#39;emailAddress&#39; (logical AND) to filter results.
     * @param username &#39;username&#39; mask to filter results (optional)
     * @param exactUsername Indicates if the username must be equals (ignore case). Only apply if username is provided (optional)
     * @param emailAddress &#39;emailAddress&#39; mask to filter results (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listUsersAsync(String username, Boolean exactUsername, String emailAddress, final ApiCallback<List<UserDetailResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listUsersValidateBeforeCall(username, exactUsername, emailAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserDetailResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listUsersWithPermissions
     * @param username &#39;username&#39; mask to filter results (optional)
     * @param emailAddress &#39;emailAddress&#39; mask to filter results (optional)
     * @param applicationName &#39;applicationName&#39; mask to filter results (optional)
     * @param exactUsername Indicates if the username must be equals (ignore case). Only apply if username is provided (optional)
     * @param exactApplicationName Indicates if the applicationName must be equals (ignore case). Only apply if applicationName is provided (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listUsersWithPermissionsCall(String username, String emailAddress, String applicationName, Boolean exactUsername, Boolean exactApplicationName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/applications/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (emailAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("emailAddress", emailAddress));
        if (applicationName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("applicationName", applicationName));
        if (exactUsername != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exactUsername", exactUsername));
        if (exactApplicationName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exactApplicationName", exactApplicationName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listUsersWithPermissionsValidateBeforeCall(String username, String emailAddress, String applicationName, Boolean exactUsername, Boolean exactApplicationName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listUsersWithPermissionsCall(username, emailAddress, applicationName, exactUsername, exactApplicationName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of users and application permissions
     * List the users of your account with their application permissions. Use &#39;username&#39; and &#39;emailAddress&#39; and &#39;applicationName&#39; (logical AND) to filter results.
     * @param username &#39;username&#39; mask to filter results (optional)
     * @param emailAddress &#39;emailAddress&#39; mask to filter results (optional)
     * @param applicationName &#39;applicationName&#39; mask to filter results (optional)
     * @param exactUsername Indicates if the username must be equals (ignore case). Only apply if username is provided (optional)
     * @param exactApplicationName Indicates if the applicationName must be equals (ignore case). Only apply if applicationName is provided (optional)
     * @return List&lt;UserAppsPermissionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserAppsPermissionsResponse> listUsersWithPermissions(String username, String emailAddress, String applicationName, Boolean exactUsername, Boolean exactApplicationName) throws ApiException {
        ApiResponse<List<UserAppsPermissionsResponse>> resp = listUsersWithPermissionsWithHttpInfo(username, emailAddress, applicationName, exactUsername, exactApplicationName);
        return resp.getData();
    }

    /**
     * Get list of users and application permissions
     * List the users of your account with their application permissions. Use &#39;username&#39; and &#39;emailAddress&#39; and &#39;applicationName&#39; (logical AND) to filter results.
     * @param username &#39;username&#39; mask to filter results (optional)
     * @param emailAddress &#39;emailAddress&#39; mask to filter results (optional)
     * @param applicationName &#39;applicationName&#39; mask to filter results (optional)
     * @param exactUsername Indicates if the username must be equals (ignore case). Only apply if username is provided (optional)
     * @param exactApplicationName Indicates if the applicationName must be equals (ignore case). Only apply if applicationName is provided (optional)
     * @return ApiResponse&lt;List&lt;UserAppsPermissionsResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserAppsPermissionsResponse>> listUsersWithPermissionsWithHttpInfo(String username, String emailAddress, String applicationName, Boolean exactUsername, Boolean exactApplicationName) throws ApiException {
        com.squareup.okhttp.Call call = listUsersWithPermissionsValidateBeforeCall(username, emailAddress, applicationName, exactUsername, exactApplicationName, null, null);
        Type localVarReturnType = new TypeToken<List<UserAppsPermissionsResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of users and application permissions (asynchronously)
     * List the users of your account with their application permissions. Use &#39;username&#39; and &#39;emailAddress&#39; and &#39;applicationName&#39; (logical AND) to filter results.
     * @param username &#39;username&#39; mask to filter results (optional)
     * @param emailAddress &#39;emailAddress&#39; mask to filter results (optional)
     * @param applicationName &#39;applicationName&#39; mask to filter results (optional)
     * @param exactUsername Indicates if the username must be equals (ignore case). Only apply if username is provided (optional)
     * @param exactApplicationName Indicates if the applicationName must be equals (ignore case). Only apply if applicationName is provided (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listUsersWithPermissionsAsync(String username, String emailAddress, String applicationName, Boolean exactUsername, Boolean exactApplicationName, final ApiCallback<List<UserAppsPermissionsResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listUsersWithPermissionsValidateBeforeCall(username, emailAddress, applicationName, exactUsername, exactApplicationName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserAppsPermissionsResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUser
     * @param body the user to update (required)
     * @param username User name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserCall(UserManagementRequest body, String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/users/{username}"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserValidateBeforeCall(UserManagementRequest body, String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateUser(Async)");
        }
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling updateUser(Async)");
        }
        

        com.squareup.okhttp.Call call = updateUserCall(body, username, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update user
     * Modifies the information of an user in your account.
     * @param body the user to update (required)
     * @param username User name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateUser(UserManagementRequest body, String username) throws ApiException {
        updateUserWithHttpInfo(body, username);
    }

    /**
     * Update user
     * Modifies the information of an user in your account.
     * @param body the user to update (required)
     * @param username User name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateUserWithHttpInfo(UserManagementRequest body, String username) throws ApiException {
        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(body, username, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update user (asynchronously)
     * Modifies the information of an user in your account.
     * @param body the user to update (required)
     * @param username User name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserAsync(UserManagementRequest body, String username, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(body, username, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
