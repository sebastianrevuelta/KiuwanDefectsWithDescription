/*
 * Kiuwan REST API
 * Kiuwan REST API specification
 *
 * OpenAPI spec version: 2.8.2004.3-SNAPSHOT
 * Contact: support@kiuwan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import io.swagger.client.model.ListInsightsComponentsResponse;
import io.swagger.client.model.ListLicensesResponse;
import io.swagger.client.model.ListObsolescencesResponse;
import io.swagger.client.model.ListSecuritiesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InsightsApi {
    private ApiClient apiClient;

    public InsightsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InsightsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for insightReportSummary
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insightReportSummaryCall(String application, String analysisCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insights/analysis/summary/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (analysisCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("analysisCode", analysisCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insightReportSummaryValidateBeforeCall(String application, String analysisCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling insightReportSummary(Async)");
        }
        
        // verify the required parameter 'analysisCode' is set
        if (analysisCode == null) {
            throw new ApiException("Missing the required parameter 'analysisCode' when calling insightReportSummary(Async)");
        }
        

        com.squareup.okhttp.Call call = insightReportSummaryCall(application, analysisCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get PDF report of insight
     * Obtains an insight report for an application name specified in application parameter and a concrete analysis specified by analysisCode parameter.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File insightReportSummary(String application, String analysisCode) throws ApiException {
        ApiResponse<File> resp = insightReportSummaryWithHttpInfo(application, analysisCode);
        return resp.getData();
    }

    /**
     * Get PDF report of insight
     * Obtains an insight report for an application name specified in application parameter and a concrete analysis specified by analysisCode parameter.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> insightReportSummaryWithHttpInfo(String application, String analysisCode) throws ApiException {
        com.squareup.okhttp.Call call = insightReportSummaryValidateBeforeCall(application, analysisCode, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get PDF report of insight (asynchronously)
     * Obtains an insight report for an application name specified in application parameter and a concrete analysis specified by analysisCode parameter.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insightReportSummaryAsync(String application, String analysisCode, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insightReportSummaryValidateBeforeCall(application, analysisCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listInsightsComponents
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listInsightsComponentsCall(String application, String analysisCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insights/analysis/components";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (analysisCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("analysisCode", analysisCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listInsightsComponentsValidateBeforeCall(String application, String analysisCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling listInsightsComponents(Async)");
        }
        
        // verify the required parameter 'analysisCode' is set
        if (analysisCode == null) {
            throw new ApiException("Missing the required parameter 'analysisCode' when calling listInsightsComponents(Async)");
        }
        

        com.squareup.okhttp.Call call = listInsightsComponentsCall(application, analysisCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of components
     * List components in analysis for an application name specified in application parameter and a concrete analysis specified by analysisCode parameter.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @return ListInsightsComponentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListInsightsComponentsResponse listInsightsComponents(String application, String analysisCode) throws ApiException {
        ApiResponse<ListInsightsComponentsResponse> resp = listInsightsComponentsWithHttpInfo(application, analysisCode);
        return resp.getData();
    }

    /**
     * Get list of components
     * List components in analysis for an application name specified in application parameter and a concrete analysis specified by analysisCode parameter.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @return ApiResponse&lt;ListInsightsComponentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListInsightsComponentsResponse> listInsightsComponentsWithHttpInfo(String application, String analysisCode) throws ApiException {
        com.squareup.okhttp.Call call = listInsightsComponentsValidateBeforeCall(application, analysisCode, null, null);
        Type localVarReturnType = new TypeToken<ListInsightsComponentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of components (asynchronously)
     * List components in analysis for an application name specified in application parameter and a concrete analysis specified by analysisCode parameter.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listInsightsComponentsAsync(String application, String analysisCode, final ApiCallback<ListInsightsComponentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listInsightsComponentsValidateBeforeCall(application, analysisCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListInsightsComponentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLicenses
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLicensesCall(String application, String analysisCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insights/analysis/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (analysisCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("analysisCode", analysisCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLicensesValidateBeforeCall(String application, String analysisCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling listLicenses(Async)");
        }
        
        // verify the required parameter 'analysisCode' is set
        if (analysisCode == null) {
            throw new ApiException("Missing the required parameter 'analysisCode' when calling listLicenses(Async)");
        }
        

        com.squareup.okhttp.Call call = listLicensesCall(application, analysisCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of licenses
     * List licenses in analysis for an application name specified in application parameter and a concrete analysis specified by analysisCode parameter.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @return ListLicensesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListLicensesResponse listLicenses(String application, String analysisCode) throws ApiException {
        ApiResponse<ListLicensesResponse> resp = listLicensesWithHttpInfo(application, analysisCode);
        return resp.getData();
    }

    /**
     * Get list of licenses
     * List licenses in analysis for an application name specified in application parameter and a concrete analysis specified by analysisCode parameter.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @return ApiResponse&lt;ListLicensesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListLicensesResponse> listLicensesWithHttpInfo(String application, String analysisCode) throws ApiException {
        com.squareup.okhttp.Call call = listLicensesValidateBeforeCall(application, analysisCode, null, null);
        Type localVarReturnType = new TypeToken<ListLicensesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of licenses (asynchronously)
     * List licenses in analysis for an application name specified in application parameter and a concrete analysis specified by analysisCode parameter.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLicensesAsync(String application, String analysisCode, final ApiCallback<ListLicensesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLicensesValidateBeforeCall(application, analysisCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListLicensesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listObsolescences
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listObsolescencesCall(String application, String analysisCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insights/analysis/obsolescence";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (analysisCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("analysisCode", analysisCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listObsolescencesValidateBeforeCall(String application, String analysisCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling listObsolescences(Async)");
        }
        
        // verify the required parameter 'analysisCode' is set
        if (analysisCode == null) {
            throw new ApiException("Missing the required parameter 'analysisCode' when calling listObsolescences(Async)");
        }
        

        com.squareup.okhttp.Call call = listObsolescencesCall(application, analysisCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of obsolescences
     * List obsolescences in analysis for an application name specified in application parameter and a concrete analysis specified by analysisCode parameter.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @return ListObsolescencesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListObsolescencesResponse listObsolescences(String application, String analysisCode) throws ApiException {
        ApiResponse<ListObsolescencesResponse> resp = listObsolescencesWithHttpInfo(application, analysisCode);
        return resp.getData();
    }

    /**
     * Get list of obsolescences
     * List obsolescences in analysis for an application name specified in application parameter and a concrete analysis specified by analysisCode parameter.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @return ApiResponse&lt;ListObsolescencesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListObsolescencesResponse> listObsolescencesWithHttpInfo(String application, String analysisCode) throws ApiException {
        com.squareup.okhttp.Call call = listObsolescencesValidateBeforeCall(application, analysisCode, null, null);
        Type localVarReturnType = new TypeToken<ListObsolescencesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of obsolescences (asynchronously)
     * List obsolescences in analysis for an application name specified in application parameter and a concrete analysis specified by analysisCode parameter.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listObsolescencesAsync(String application, String analysisCode, final ApiCallback<ListObsolescencesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listObsolescencesValidateBeforeCall(application, analysisCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListObsolescencesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listVulnerabilities
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listVulnerabilitiesCall(String application, String analysisCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insights/analysis/security";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (analysisCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("analysisCode", analysisCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listVulnerabilitiesValidateBeforeCall(String application, String analysisCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling listVulnerabilities(Async)");
        }
        
        // verify the required parameter 'analysisCode' is set
        if (analysisCode == null) {
            throw new ApiException("Missing the required parameter 'analysisCode' when calling listVulnerabilities(Async)");
        }
        

        com.squareup.okhttp.Call call = listVulnerabilitiesCall(application, analysisCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get insight security detail list
     * List security in analysis for an application name specified in application parameter and a concrete analysis specified by analysisCode parameter.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @return ListSecuritiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListSecuritiesResponse listVulnerabilities(String application, String analysisCode) throws ApiException {
        ApiResponse<ListSecuritiesResponse> resp = listVulnerabilitiesWithHttpInfo(application, analysisCode);
        return resp.getData();
    }

    /**
     * Get insight security detail list
     * List security in analysis for an application name specified in application parameter and a concrete analysis specified by analysisCode parameter.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @return ApiResponse&lt;ListSecuritiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListSecuritiesResponse> listVulnerabilitiesWithHttpInfo(String application, String analysisCode) throws ApiException {
        com.squareup.okhttp.Call call = listVulnerabilitiesValidateBeforeCall(application, analysisCode, null, null);
        Type localVarReturnType = new TypeToken<ListSecuritiesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get insight security detail list (asynchronously)
     * List security in analysis for an application name specified in application parameter and a concrete analysis specified by analysisCode parameter.
     * @param application Application name (required)
     * @param analysisCode Analysis code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listVulnerabilitiesAsync(String application, String analysisCode, final ApiCallback<ListSecuritiesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listVulnerabilitiesValidateBeforeCall(application, analysisCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListSecuritiesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
