/*
 * Kiuwan REST API
 * Kiuwan REST API specification
 *
 * OpenAPI spec version: 2.8.2004.3-SNAPSHOT
 * Contact: support@kiuwan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActionPlanReportsApi {
    private ApiClient apiClient;

    public ActionPlanReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActionPlanReportsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for generateReportActionPlanProgress
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @param type Type of report (optional, default to PDF)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generateReportActionPlanProgressCall(String application, String name, OffsetDateTime creation, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionPlan/progress/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (creation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("creation", creation));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf", "text/csv", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generateReportActionPlanProgressValidateBeforeCall(String application, String name, OffsetDateTime creation, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling generateReportActionPlanProgress(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling generateReportActionPlanProgress(Async)");
        }
        

        com.squareup.okhttp.Call call = generateReportActionPlanProgressCall(application, name, creation, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get progress report of an action plan
     * Get progress report of an action plan or JSON with errors
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @param type Type of report (optional, default to PDF)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File generateReportActionPlanProgress(String application, String name, OffsetDateTime creation, String type) throws ApiException {
        ApiResponse<File> resp = generateReportActionPlanProgressWithHttpInfo(application, name, creation, type);
        return resp.getData();
    }

    /**
     * Get progress report of an action plan
     * Get progress report of an action plan or JSON with errors
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @param type Type of report (optional, default to PDF)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> generateReportActionPlanProgressWithHttpInfo(String application, String name, OffsetDateTime creation, String type) throws ApiException {
        com.squareup.okhttp.Call call = generateReportActionPlanProgressValidateBeforeCall(application, name, creation, type, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get progress report of an action plan (asynchronously)
     * Get progress report of an action plan or JSON with errors
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @param type Type of report (optional, default to PDF)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generateReportActionPlanProgressAsync(String application, String name, OffsetDateTime creation, String type, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generateReportActionPlanProgressValidateBeforeCall(application, name, creation, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for generateReportActionPlanSecurity
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @param type Type of report (optional, default to PDF)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generateReportActionPlanSecurityCall(String application, String name, OffsetDateTime creation, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionPlan/security/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (creation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("creation", creation));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf", "text/csv", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generateReportActionPlanSecurityValidateBeforeCall(String application, String name, OffsetDateTime creation, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling generateReportActionPlanSecurity(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling generateReportActionPlanSecurity(Async)");
        }
        

        com.squareup.okhttp.Call call = generateReportActionPlanSecurityCall(application, name, creation, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get security report of an action plan
     * Get security report of an action plan or JSON with errors
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @param type Type of report (optional, default to PDF)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File generateReportActionPlanSecurity(String application, String name, OffsetDateTime creation, String type) throws ApiException {
        ApiResponse<File> resp = generateReportActionPlanSecurityWithHttpInfo(application, name, creation, type);
        return resp.getData();
    }

    /**
     * Get security report of an action plan
     * Get security report of an action plan or JSON with errors
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @param type Type of report (optional, default to PDF)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> generateReportActionPlanSecurityWithHttpInfo(String application, String name, OffsetDateTime creation, String type) throws ApiException {
        com.squareup.okhttp.Call call = generateReportActionPlanSecurityValidateBeforeCall(application, name, creation, type, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get security report of an action plan (asynchronously)
     * Get security report of an action plan or JSON with errors
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @param type Type of report (optional, default to PDF)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generateReportActionPlanSecurityAsync(String application, String name, OffsetDateTime creation, String type, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generateReportActionPlanSecurityValidateBeforeCall(application, name, creation, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for generateReportActionPlanSecurityProgress
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @param type Type of report (optional, default to PDF)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generateReportActionPlanSecurityProgressCall(String application, String name, OffsetDateTime creation, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actionPlan/security/progress/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (application != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("application", application));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (creation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("creation", creation));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf", "text/csv", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Cookie", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generateReportActionPlanSecurityProgressValidateBeforeCall(String application, String name, OffsetDateTime creation, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling generateReportActionPlanSecurityProgress(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling generateReportActionPlanSecurityProgress(Async)");
        }
        

        com.squareup.okhttp.Call call = generateReportActionPlanSecurityProgressCall(application, name, creation, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get security progress report of an action plan
     * Get security progress report of an action plan or JSON with errors
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @param type Type of report (optional, default to PDF)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File generateReportActionPlanSecurityProgress(String application, String name, OffsetDateTime creation, String type) throws ApiException {
        ApiResponse<File> resp = generateReportActionPlanSecurityProgressWithHttpInfo(application, name, creation, type);
        return resp.getData();
    }

    /**
     * Get security progress report of an action plan
     * Get security progress report of an action plan or JSON with errors
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @param type Type of report (optional, default to PDF)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> generateReportActionPlanSecurityProgressWithHttpInfo(String application, String name, OffsetDateTime creation, String type) throws ApiException {
        com.squareup.okhttp.Call call = generateReportActionPlanSecurityProgressValidateBeforeCall(application, name, creation, type, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get security progress report of an action plan (asynchronously)
     * Get security progress report of an action plan or JSON with errors
     * @param application Application name (required)
     * @param name Action plan name (required)
     * @param creation Action plan creation date (optional)
     * @param type Type of report (optional, default to PDF)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generateReportActionPlanSecurityProgressAsync(String application, String name, OffsetDateTime creation, String type, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generateReportActionPlanSecurityProgressValidateBeforeCall(application, name, creation, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
