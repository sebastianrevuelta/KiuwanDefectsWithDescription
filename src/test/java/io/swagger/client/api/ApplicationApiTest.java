/*
 * Kiuwan REST API
 * Kiuwan REST API specification
 *
 * OpenAPI spec version: 2.8.2004.3-SNAPSHOT
 * Contact: support@kiuwan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AnalysisDefectsResponse;
import io.swagger.client.model.ApplicationResponse;
import io.swagger.client.model.DefectsKeptInCommonDetailResponse;
import io.swagger.client.model.Scan;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplicationApi
 */
@Ignore
public class ApplicationApiTest {

    private final ApplicationApi api = new ApplicationApi();

    
    /**
     * Get suppression rules
     *
     * Get suppression rules for application given as parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSuppressionsTest() throws ApiException {
        String application = null;
        String response = api.downloadSuppressions(application);

        // TODO: test validations
    }
    
    /**
     * Get applications
     *
     * Retrieves applications for the authenticated user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationsTest() throws ApiException {
        List<ApplicationResponse> response = api.getApplications();

        // TODO: test validations
    }
    
    /**
     * Get applications filtered
     *
     * Retrieves applications for the authenticated user filtered.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationsListTest() throws ApiException {
        String applicationName = null;
        Boolean exactApplicationName = null;
        String initDateAnalysis = null;
        String endDateAnalysis = null;
        Integer page = null;
        Integer count = null;
        String orderBy = null;
        Boolean asc = null;
        List<ApplicationResponse> response = api.getApplicationsList(applicationName, exactApplicationName, initDateAnalysis, endDateAnalysis, page, count, orderBy, asc);

        // TODO: test validations
    }
    
    /**
     * Get list of application defects
     *
     * List application defects for the indicated application.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDefectsTest() throws ApiException {
        String application = null;
        String characteristics = null;
        String languages = null;
        String priorities = null;
        String fileContains = null;
        String orderBy = null;
        Boolean asc = null;
        Integer page = null;
        Integer count = null;
        AnalysisDefectsResponse response = api.getDefects(application, characteristics, languages, priorities, fileContains, orderBy, asc, page, count);

        // TODO: test validations
    }
    
    /**
     * Get Application Defects Still Open since date
     *
     * Get Application defects still open on latest analysis( or atAnalysisCode if provided) sinceDate (or previous sinceAnalysisCode if provided). Can be filtered by onlySecurity or by withRuleTag. Paginated
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDefectsStillOpenTest() throws ApiException {
        String application = null;
        String sinceDate = null;
        String sinceAnalysisCode = null;
        String atAnalysisCode = null;
        Boolean onlyCodeSecurity = null;
        String withRuleTags = null;
        Integer page = null;
        Integer count = null;
        DefectsKeptInCommonDetailResponse response = api.getDefectsStillOpen(application, sinceDate, sinceAnalysisCode, atAnalysisCode, onlyCodeSecurity, withRuleTags, page, count);

        // TODO: test validations
    }
    
    /**
     * Get analysis global metrics
     *
     * Obtains the global metrics of indicated analysis.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMetricsMapTest() throws ApiException {
        String code = null;
        Map<String, Object> response = api.getMetricsMap(code);

        // TODO: test validations
    }
    
    /**
     * Get list of application vulnerabilities in Threadfix format
     *
     * List application vulnerabilities in Threadfix format for the given application or analysis code.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getThreadfixFindingsTest() throws ApiException {
        String application = null;
        String code = null;
        Scan response = api.getThreadfixFindings(application, code);

        // TODO: test validations
    }
    
}
